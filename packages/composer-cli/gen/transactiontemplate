/*
 * Generated by Composer CLI
 */

'use strict';
const fs = require('fs');
const os = require('os');
const Client = require('composer-client');
const Admin = require('composer-admin');
const Common = require('composer-common');
const BusinessNetworkDefinition = Admin.BusinessNetworkDefinition;
const BusinessNetworkConnection = Client.BusinessNetworkConnection;
const AdminConnection = Admin.AdminConnection;

const PROFILE_ROOT = os.homedir() + '/.composer-connection-profiles/';
const CONNECTION_FILE = 'connection.json';

const CREDENTIALS_ROOT = os.homedir() + '/.composer-credentials';
const DEFAULT_PROFILE_NAME = 'defaultProfile';

require('chai').should();

const chai = require('chai');
require('sinon-as-promised');
chai.should();
chai.use(require('chai-things'));
chai.use(require('chai-as-promised'));


describe('#Transactions', () => {

    let connectionProfileName;
    let businessNetworkName;
    let businessNetworkConnection;
    let businessNetworkDefinition;

    let adminConnection;
    let client;

    let enrollId;
    let enrollSecret;

    before(function() {
        /**
         * This is an example of how to connect to deploy your business network
         * and connect to run system tests
        this.timeout(30000);
        enrollId = '{{enrollId}}';
        enrollSecret = '{{enrollSecret}}';
        businessNetworkName = '{{businessNetworkName}}';
        connectionProfileName = DEFAULT_PROFILE_NAME;
        let connectOptions = null;
        let archiveFileContents = null;

        // Read archive file contents
        archiveFileContents = getArchiveFileContents('{{networkArchiveLocation}}');
        // Get the connection ioptions
        connectOptions = getConnectOptions(connectionProfileName);

        return BusinessNetworkDefinition.fromArchive(archiveFileContents)
        .then((result) => {
            businessNetworkDefinition = result;
            adminConnection = new AdminConnection();
            return adminConnection.createProfile(connectionProfileName, connectOptions);
        })
        .then(() => {
            return adminConnection.connect(connectionProfileName, enrollId, enrollSecret);
        })
        .then(() => {
            return adminConnection.deploy(businessNetworkDefinition);
        })
        .then(() => {
            businessNetworkConnection = new BusinessNetworkConnection();
            return businessNetworkConnection.connect(connectionProfileName, businessNetworkName, enrollId, enrollSecret);
        });
        */
    });

    {{tests|safe}}
});

function createAsset(businessNetworkConnection, assetRegistry, assetType, assetId) {
      let factory = businessNetworkConnection.getBusinessNetwork().getFactory();
      let asset = factory.newResource(assetRegistry, assetType, assetId);

      return asset;
}

/**
  * Get connection options from profile
  * @param {string} connectionProfileName connection profile name
  * @return {connectOptions} connectOptions options
  */
function getConnectOptions(connectionProfileName) {
    let connectOptions;
    let connectionProfile = PROFILE_ROOT + connectionProfileName + '/' + CONNECTION_FILE;

    let defaultKeyValStore = CREDENTIALS_ROOT;

    connectOptions = {type: 'hlf'
                     ,membershipServicesURL: 'grpc://localhost:7054'
                     ,peerURL: 'grpc://localhost:7051'
                     ,eventHubURL: 'grpc://localhost:7053'
                     ,keyValStore: defaultKeyValStore
                     ,deployWaitTime: '300'
                     ,invokeWaitTime: '100'};
    return connectOptions;
}

/**
  * Get contents from archive file
  * @param {string} archiveFile connection profile name
  * @return {String} archiveFileContents archive file contents
  */
function  getArchiveFileContents(archiveFile) {
    let archiveFileContents;
    if (fs.existsSync(archiveFile)) {
        archiveFileContents = fs.readFileSync(archiveFile);
    } else {
        throw new Error('Archive file '+archiveFile+' does not exist.');
    }
    return archiveFileContents;
}
