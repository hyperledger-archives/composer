class BusinessNetworkDefinition {
   + String getIdentifier() 
   + BusinessNetworkMetadata getMetadata() 
   + String getName() 
   + String getVersion() 
   + String getDescription() 
   + Promise fromArchive(Buffer) 
   + Promise toArchive(Object) 
   + Promise fromDirectory(String,Object,Object,boolean,boolean,boolean,object,boolean) 
   + Promise toDirectory(String) 
   + Introspector getIntrospector() 
   + Factory getFactory() 
   + Serializer getSerializer() 
}
class BusinessNetworkMetadata {
   + String getREADME() 
   + object getPackageJson() 
   + String getName() 
   + String getDescription() 
   + String getVersion() 
   + String getIdentifier() 
}
class BusinessNetworkCardStore {
   + String getDefaultCardName(IdCard) 
   + Promise get(String) 
   + Promise put(String,IdCard) 
   + Promise has(String) 
   + Promise getAll() 
   + Promise delete(String) 
}
class Certificate {
   + void constructor(string) 
   + string getCertificate() 
   + string getPublicKey() 
   + string getIdentifier() 
   + string getIssuer() 
   + string getName() 
}
class CertificateUtil {
   + void generate(Object,string,string,string,string) 
}
class CommitDecorator extends Decorator {
   + void constructor(Object) throws IllegalModelException
   + boolean getValue() 
}
class CommitDecoratorFactory extends DecoratorFactory {
   + Decorator newDecorator(Object) 
}
class Factory {
   + Resource newResource(String,String,String,Object,boolean,String,boolean,boolean) throws TypeNotFoundException
   + Resource newConcept(String,String,Object,boolean,String,boolean) throws TypeNotFoundException
   + Relationship newRelationship(String,String,String) throws TypeNotFoundException
   + Resource newTransaction(String,String,String,Object,String,boolean,boolean) 
   + Resource newEvent(String,String,String,Object,String,boolean,boolean) 
}
class IdCard {
   + void constructor(Object,Object) 
   + String getUserName() 
   + String getDescription() 
   + String getBusinessNetworkName() 
   + Object getConnectionProfile() 
   + Object getCredentials() 
   + void setCredentials(Object) 
   + Object getEnrollmentCredentials() 
   + String[] getRoles() 
   + Promise fromArchive() 
   + Promise toArchive(Object,String) 
   + Promise fromDirectory(String,undefined) 
   + Promise toDirectory(String,undefined) 
}
class IndexCompiler {
   + String compile(QueryManager) 
}
class AssetDeclaration extends ClassDeclaration {
   + void constructor(ModelFile,Object) throws IllegalModelException
   + boolean isRelationshipTarget() 
   + string getSystemType() 
}
class ClassDeclaration extends Decorated {
   + void constructor(ModelFile,string) throws IllegalModelException
   + ClassDeclaration _resolveSuperType() 
   + string getSystemType() 
   + boolean isAbstract() 
   + boolean isEnum() 
   + boolean isConcept() 
   + boolean isEvent() 
   + boolean isRelationshipTarget() 
   + boolean isSystemRelationshipTarget() 
   + boolean isSystemType() 
   + boolean isSystemCoreType() 
   + string getName() 
   + String getNamespace() 
   + string getFullyQualifiedName() 
   + string getIdentifierFieldName() 
   + Property getOwnProperty(string) 
   + Property[] getOwnProperties() 
   + string getSuperType() 
   + ClassDeclaration getSuperTypeDeclaration() 
   + ClassDeclaration[] getAssignableClassDeclarations() 
   + ClassDeclaration[] getAllSuperTypeDeclarations() 
   + Property getProperty(string) 
   + Property[] getProperties() 
   + Property getNestedProperty(string) throws IllegalModelException
   + String toString() 
}
class ConceptDeclaration extends ClassDeclaration {
   + void constructor(ModelFile,Object) throws IllegalModelException
   + boolean isConcept() 
}
class Decorator {
   + void constructor(Object) throws IllegalModelException
   + void getParent() 
   + string getName() 
   + object[] getArguments() 
}
class DecoratorFactory {
   + Decorator newDecorator(Object) 
}
class EnumDeclaration extends ClassDeclaration {
   + void constructor(ModelFile,Object) throws IllegalModelException
   + boolean isEnum() 
   + String toString() 
}
class EnumValueDeclaration extends Property {
   + void constructor(ClassDeclaration,Object) throws IllegalModelException
}
class EventDeclaration extends ClassDeclaration {
   + void constructor(ModelFile,Object) throws InvalidModelException
   + string getSystemType() 
   + boolean isEvent() 
}
class FunctionDeclaration {
   + void constructor(ModelManager,string,string,string,string,string,string[],string[],string[],string) throws IllegalModelException
   + string getFunctionText() 
   + string getThrows() 
   + string getLanguage() 
   + string[] getDecorators() 
   + string getVisibility() 
   + string getReturnType() 
   + string getName() 
   + string getTransactionDeclarationName() 
   + string[] getParameterNames() 
   + string[] getParameterTypes() 
}
class Introspector {
   + void constructor(ModelManager) 
   + ClassDeclaration[] getClassDeclarations() 
   + ClassDeclaration getClassDeclaration(String) throws Error
}
class ModelFile {
   + boolean isExternal() 
   + ModelManager getModelManager() 
   + string[] getImports() 
   + boolean isDefined(string) 
   + ClassDeclaration getLocalType(string) 
   + AssetDeclaration getAssetDeclaration(string) 
   + TransactionDeclaration getTransactionDeclaration(string) 
   + EventDeclaration getEventDeclaration(string) 
   + ParticipantDeclaration getParticipantDeclaration(string) 
   + string getNamespace() 
   + string getName() 
   + AssetDeclaration[] getAssetDeclarations(Boolean) 
   + TransactionDeclaration[] getTransactionDeclarations(Boolean) 
   + EventDeclaration[] getEventDeclarations(Boolean) 
   + ParticipantDeclaration[] getParticipantDeclarations(Boolean) 
   + ConceptDeclaration[] getConceptDeclarations(Boolean) 
   + EnumDeclaration[] getEnumDeclarations(Boolean) 
   + ClassDeclaration[] getDeclarations(Function,Boolean) 
   + ClassDeclaration[] getAllDeclarations() 
   + string getDefinitions() 
   + boolean isSystemModelFile() 
}
class ParticipantDeclaration extends ClassDeclaration {
   + void constructor(ModelFile,Object) throws IllegalModelException
   + boolean isRelationshipTarget() 
   + string getSystemType() 
}
class Property extends Decorated {
   + void constructor(ClassDeclaration,Object) throws IllegalModelException
   + ClassDeclaration getParent() 
   + string getName() 
   + string getType() 
   + boolean isOptional() 
   + string getFullyQualifiedTypeName() 
   + string getFullyQualifiedName() 
   + string getNamespace() 
   + boolean isArray() 
   + boolean isTypeEnum() 
   + boolean isPrimitive() 
}
class RelationshipDeclaration extends Property {
   + void constructor(ClassDeclaration,Object) throws IllegalModelException
   + String toString() 
}
class TransactionDeclaration extends ClassDeclaration {
   + void constructor(ModelFile,Object) throws IllegalModelException
   + string getSystemType() 
}
class Concept extends Typed {
   + boolean isConcept() 
}
class Identifiable extends Typed {
   + string getIdentifier() 
   + void setIdentifier(string) 
   + string getFullyQualifiedIdentifier() 
   + String toString() 
   + boolean isRelationship() 
   + boolean isResource() 
   + String toURI() 
}
class Relationship extends Identifiable {
   + String toString() 
   + boolean isRelationship() 
   + Relationship fromURI(ModelManager,String,String,String) 
}
class Resource extends Identifiable {
   + String toString() 
   + boolean isResource() 
   + Object toJSON() 
}
class Typed {
   + string getType() 
   + string getFullyQualifiedType() 
   + string getNamespace() 
   + void setPropertyValue(string,string) 
   + void addArrayValue(string,string) 
   + boolean instanceOf(String) 
}
class ValidatedConcept extends Concept {
   + void setPropertyValue(string,string) throws Error
   + void addArrayValue(string,string) throws Error
   + void validate() throws Error
}
class ValidatedResource extends Resource {
   + void setPropertyValue(string,string) throws Error
   + void addArrayValue(string,string) throws Error
   + void validate() throws Error
}
class ModelManager {
   + void validateModelFile(string,string) throws IllegalModelException
   + Object addModelFile(string,string,boolean) throws IllegalModelException
   + Object updateModelFile(string,string,boolean) throws IllegalModelException
   + void deleteModelFile(string) 
   + Object[] addModelFiles(string[],undefined,boolean) 
   + void validateModelFiles() 
   + Promise updateExternalModels(Object,ModelFileDownloader) throws IllegalModelException
   + void clearModelFiles() 
   + string[] getNamespaces() 
   + ClassDeclaration[] getSystemTypes() 
   + AssetDeclaration[] getAssetDeclarations(Boolean) 
   + TransactionDeclaration[] getTransactionDeclarations(Boolean) 
   + EventDeclaration[] getEventDeclarations(Boolean) 
   + ParticipantDeclaration[] getParticipantDeclarations(Boolean) 
   + EnumDeclaration[] getEnumDeclarations(Boolean) 
   + ConceptDeclaration[] getConceptDeclarations(Boolean) 
   + Factory getFactory() 
   + Serializer getSerializer() 
   + DecoratorFactory[] getDecoratorFactories() 
   + void addDecoratorFactory(DecoratorFactory) 
}
class ReadOnlyDecorator extends Decorator {
   + void constructor(Object) throws IllegalModelException
}
class ReadOnlyDecoratorFactory extends DecoratorFactory {
   + Decorator newDecorator(Object) 
}
class ReturnsDecorator extends Decorator {
   + void constructor(Object) throws IllegalModelException
   + string getType() 
   + ClassDeclaration getResolvedType() 
   + boolean isArray() 
   + boolean isPrimitive() 
   + boolean isTypeEnum() 
}
class ReturnsDecoratorFactory extends DecoratorFactory {
   + Decorator newDecorator(Object) 
}
class Serializer {
   + void constructor(Factory,ModelManager) 
   + void setDefaultOptions(Object) 
   + Object toJSON(Resource,Object,boolean,boolean,boolean,boolean,boolean) throws Error
   + Resource fromJSON(Object,Object,boolean,boolean) 
}
class Wallet {
   + Wallet getWallet() 
   + void setWallet(Wallet) 
   + Promise listNames() 
   + Promise contains(string) 
   + Promise get(string) 
   + Promise put(string,string,Object) 
   + Promise remove(string) 
}
