/**
 * Car Lease Scenario
 * Concerto Language File
 *
 * Author: Billy Blockchain
 * Version: 1.0
 * Last Updates: 2016-09-22
 */

// define the namespace for this model
namespace org.acme

// import a type from another namespace
import concerto.Participant

// define an enumeration
enum State {
    o CREATED
    o REGISTERED
    o SOLD
}

concept Person {
    o String firstName
    o String lastName
}

concept Address {
    o String city default="Winchester"
    o String country optional
    o String state optional
    o String street optional
    o String zip optional
}

concept Customer extends Person {
    o Address address
}

/**
 * Define an asset base class. Because this is an abstract asset
 * we also declare the name of the field that will identify the instances.
 */
abstract asset Base identified by vin {
    // The identifying field must be a String
    // Optinally use a regular expression to validate the contents of the field
    o String vin regex = /^[A-HJ-NPR-Z]{8}[X][A-HJ-NPR-Z]{2}\d{6}$/
}

/**
 * Vehicle is the definition of an asset that we will be tracking
 * Vehicle extends (augments) the Base asset. The identifying field has already
 * been declared, so we do not redeclare it here.
 */
asset Vehicle extends Base {
  // An asset contains Fields, each of which can have an optional default value
  o String model default="F150"
  o String make default="FORD"
  o String reg default="ABC123"
  // A numeric field can have a range validation expression
  o Integer year default=2016 range=[1990,] optional // model year must be 1990 or higher
  o Integer[] integerArray
  o State state
  o Double value
  o String colour
  o String V5cID regex=/^[A-z][A-z][0-9]{7}/
  o String LeaseContractID
  o Boolean scrapped default=false
  o DateTime lastUpdate optional
  --> Participant owner //relationship to a Participant, with the field named 'owner'.
  --> Participant[] previousOwners optional // Nary relationship
  o Customer customer
}

participant Regulator extends Participant {

}

// defines a Vehicle transaction type
transaction VehicleTransaction identified by transactionId {
  o String transactionId
	--> Vehicle vehicle // a VehicleTransaction is related to a Vehicle
}

transaction VehicleCreated extends VehicleTransaction {
}

transaction VehicleTransferredToManufacturer extends VehicleTransaction{
	--> Participant manufacturer
}

transaction VehicleTransferredToDealer extends VehicleTransaction{
	--> Participant dealer
}

transaction VehicleTransferredToLeaseCompany extends VehicleTransaction{
	--> Participant leaseCompany
}

transaction VehicleTransferredToLeasee extends VehicleTransaction{
	--> Participant leasee
}

transaction VehicleTransferredToScrapMerchant extends VehicleTransaction{
	--> Participant scrapMerchant
}

transaction VehicleScrapped extends VehicleTransaction{
}

event TestEvent identified by eventId {
  o String eventId
}
