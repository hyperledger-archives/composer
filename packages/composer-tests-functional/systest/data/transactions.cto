/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace systest.transactions

enum SimpleEnum {
    o WOW
    o SUCH
    o MANY
    o MUCH
}

asset SimpleStringAsset identified by assetId {
    o String assetId
    o String stringValue
}

asset SimpleIntegerAsset identified by assetId {
    o String assetId
    o Integer integerValue
}

asset SimpleRelationshipAsset identified by assetId {
    o String assetId
    --> SimpleStringAsset stringAsset
}

asset SimpleRelationshipsAsset identified by assetId {
    o String assetId
    --> SimpleStringAsset[] stringAssets
}

transaction SimpleTransactionWithPrimitiveTypes {

    o String stringValue
    o Double doubleValue
    o Integer integerValue
    o Long longValue
    o DateTime dateTimeValue
    o Boolean booleanValue
    o SimpleEnum enumValue
}

transaction SimpleTransactionWithPrimitiveTypeArrays  {

    o String[] stringValues
    o Double[] doubleValues
    o Integer[] integerValues
    o Long[] longValues
    o DateTime[] dateTimeValues
    o Boolean[] booleanValues
    o SimpleEnum[] enumValues
}

transaction SimpleTransactionWithAssets  {

    o SimpleStringAsset stringAsset
    o SimpleIntegerAsset integerAsset
}

transaction SimpleTransactionWithAssetArrays  {

    o SimpleStringAsset[] stringAssets
    o SimpleIntegerAsset[] integerAssets
}

transaction SimpleTransactionWithAssetRelationships  {

    --> SimpleStringAsset stringAsset
    --> SimpleIntegerAsset integerAsset
}

transaction SimpleTransactionWithAssetRelationshipArrays  {

    --> SimpleStringAsset[] stringAssets
    --> SimpleIntegerAsset[] integerAssets
}

transaction GetAllAssetsFromAssetRegistryTransaction {

}

transaction GetAssetFromAssetRegistryTransaction  {

}

transaction AddAssetInTransactionToAssetRegistryTransaction  {

    o SimpleStringAsset stringAsset
}

transaction AddAssetWithRelationshipInTransactionToAssetRegistryTransaction  {

    o SimpleRelationshipAsset relationshipAsset
}

transaction AddNewAssetToAssetRegistryTransaction  {

}

transaction AddNewAssetWithRelationshipToAssetRegistryTransaction {

}

transaction UpdateAssetInTransactionInAssetRegistryTransaction  {

    o SimpleStringAsset stringAsset
}

transaction UpdateAssetWithRelationshipInTransactionInAssetRegistryTransaction {

    o SimpleRelationshipAsset relationshipAsset
}

transaction UpdateNewAssetInAssetRegistryTransaction {

}

transaction UpdateNewAssetWithRelationshipToAssetRegistryTransaction  {

}

transaction RemoveAssetInTransactionInAssetRegistryTransaction  {

    o SimpleStringAsset stringAsset
}

transaction RemoveAssetWithRelationshipInTransactionInAssetRegistryTransaction  {

    o SimpleRelationshipAsset relationshipAsset
}

transaction RemoveNewAssetInAssetRegistryTransaction  {

}

transaction RemoveNewAssetWithRelationshipInAssetRegistryTransaction  {

}

transaction SingleAnnotatedTransaction  {

    o String stringValue
}

transaction MultipleAnnotatedTransaction  {

    o String stringValue1
    o String stringValue2
}

transaction TransactionUsingUtilityFunctions  {

    o String stringValue
}

concept TransactionReceipt {
    o String value
}

@returns(TransactionReceipt)
transaction TransactionThatReturnsConcept {
    o String value
}

@returns(TransactionReceipt[])
transaction TransactionThatReturnsConceptArray {
    o String value
}

@returns(DateTime)
transaction TransactionThatReturnsDateTime {
    o DateTime value
}

@returns(Integer)
transaction TransactionThatReturnsInteger {
    o Integer value
}

@returns(Long)
transaction TransactionThatReturnsLong {
    o Long value
}

@returns(Double)
transaction TransactionThatReturnsDouble {
    o Double value
}

@returns(Double[])
transaction TransactionThatReturnsDoubleArray {
    o Double value
}

@returns(Boolean)
transaction TransactionThatReturnsBoolean {
    o Boolean value
}

@returns(String)
transaction TransactionThatReturnsString {
    o String value
}

@returns(String[])
transaction TransactionThatReturnsStringArray {
    o String value
}

@returns(SimpleEnum)
transaction TransactionThatReturnsEnum {
    o String value
}

@returns(SimpleEnum[])
transaction TransactionThatReturnsEnumArray {
    o String value
}

@commit(true)
transaction TransactionWithCommitTrue {
    o String stringValue
}

@commit(false)
transaction TransactionWithCommitFalse {
    o String stringValue
}
