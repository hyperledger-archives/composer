/**
 * Car Lease Scenario
 * Concerto Language File
 *
 * Author: Billy Blockchain
 * Version: 1.0
 * Last Updates: 2016-09-22
 */

// define the namespace for this model
namespace org.acme

// import a type from the system namespace
import concerto.Participant

enum State {
    o CREATED
    o REGISTERED
    o SOLD
}

/**
 * Define an asset base class
 */
abstract asset Base  identified by vin {
    o String vin validator = "regex:/^(?:([A-HJ-NPR-Z]){3}|\d{3})(?1){2}\d{2}(?:(?1)|\d)(?:\d|X)(?:(?1)+\d+|\d+(?1)+)\d{6}$/i"
}

/**
 * Vehicle is the definition of an asset that we will be tracking
 * Vehicle extends (augments) the Base asset.
 */
asset Vehicle extends Base { // an asset is the core data type

  // An asset contains Fields, each of which can have an optional default value
  // and a validator expression
  // A Field can be declared 'optional' meaning that it may be missing
  o String model default="F150"
  o String make default="FORD"
  o String reg default="ABC123"
  o Integer year default="2016" validator="numeric:[2000, 3000]" optional
  // comment
  o Integer[] integerArray
  o State state
  o Double value
  o String colour
  o String V5cID validator="regex:^[A-z][A-z][0-9]{7}"
  o String LeaseContractID
  o Boolean scrapped default="false"
  o DateTime lastUpdate optional
  --> Participant owner //relationship to a Participant, with the field named 'owner'.
  --> Participant[] previousOwners optional // Nary relationship
}

participant Regulator extends Participant {

}

// defines a Vehicle transaction type
transaction VehicleTransaction {
	--> Vehicle vehicle // a VehicleTransaction is related to a Vehicle
}

transaction VehicleCreated extends VehicleTransaction {
}

transaction VehicleTransferredToManufacturer extends VehicleTransaction{
	--> Participant manufacturer // Participant is a built in type
}

transaction VehicleTransferredToDealer extends VehicleTransaction{
	--> Participant dealer // Participant is a built in type
}

transaction VehicleTransferredToLeaseCompany extends VehicleTransaction{
	--> Participant leaseCompany // Participant is a built in type
}

transaction VehicleTransferredToLeasee extends VehicleTransaction{
	--> Participant leasee // Participant is a built in type
}

transaction VehicleTransferredToScrapMerchant extends VehicleTransaction{
	--> Participant scrapMerchant // Participant is a built in type
}

transaction VehicleScrapped extends VehicleTransaction{
}

/*
*/


/*
permission {
    Participant 	Permissions
    Regulator 	Create, Read (All vehicles), Transfer
    Manufacturer 	Read (Own vehicles), Update (VIN, Make, Model, Colour, Reg), Transfer
    Dealership 	Read (Own vehicles), Update (Colour, Reg), Transfer
    Lease Company 	Read (Own vehicles), Update (Colour, Reg), Transfer
    Leasee 	Read (Own vehicles), Update (Colour, Reg), Transfer
    Scrap Merchant 	Read (Own vehicles), Scrap
}
*/

/*
on event VehicleCreated(vehicleCreated) {
    if(vehicleCreated.vehicle.state == 'Template')
    then {
        vehicleCreated.vehicle.state = 'Manufacture';
    }
}

    state Template {
        => Manufacture {
            when (vehicle.owner == caller &&
                    vehicle.state == 'Template' &&
                    caller.affilation == 'AUTHORITY' &&
                    vehicle.scrapped == false)
            }

    state Manufacture {
        vehicle.save();
        => PrivateOwnership
        => LeasedOut
    }

    state PrivateOwnership {
        => BeingScrapped
    }

    state LeasedOut {
        => PrivateOwnership
        => BeingScrapped
    }

    state BeingScrapped {
    }
}
*/
