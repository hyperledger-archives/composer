{"name":"AdminConnection","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":["Object","ConnectionProfileStore","Object"],"decorators":["param","param","param"],"throws":"","example":"","commentData":{"description":"Create an instance of the AdminConnection class.","tags":[{"title":"param","description":"an optional set of options to configure the instance.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Object"}},"name":"options"},{"title":"param","description":"specify a connection profile store to use.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"ConnectionProfileStore"}},"name":"options.connectionProfileStore"},{"title":"param","description":"specify an fs implementation to use.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Object"}},"name":"options.fs"}]},"description":["Create an instance of the AdminConnection class."],"parameters":[{"description":"an optional set of options to configure the instance.","type":"Object","name":"options","optional":true},{"description":"specify a connection profile store to use.","type":"ConnectionProfileStore","name":"options.connectionProfileStore","optional":true},{"description":"specify an fs implementation to use.","type":"Object","name":"options.fs","optional":true}]},{"visibility":"+","returnType":"Promise","name":"connect","methodArgs":["string","string","string","string"],"decorators":["example","param","param","param","param","return"],"throws":"","example":"// Connect to Hyperledger Fabric\nvar adminConnection = new AdminConnection();\nadminConnection.connect('testprofile', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(){\n    // Connected.\n})\n.catch(function(error){\n    // Add optional error handling here.\n});","commentData":{"description":"Connects and logs in to the Hyperledger Fabric using a named connection\nprofile. The connection profile must exist in the profile store.","tags":[{"title":"example","description":"// Connect to Hyperledger Fabric\nvar adminConnection = new AdminConnection();\nadminConnection.connect('testprofile', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(){\n    // Connected.\n})\n.catch(function(error){\n    // Add optional error handling here.\n});"},{"title":"param","description":"The name of the connection profile","type":{"type":"NameExpression","name":"string"},"name":"connectionProfile"},{"title":"param","description":"the enrollment ID of the user","type":{"type":"NameExpression","name":"string"},"name":"enrollmentID"},{"title":"param","description":"the enrollment secret of the user","type":{"type":"NameExpression","name":"string"},"name":"enrollmentSecret"},{"title":"param","description":"the id of the network (for update) or null","type":{"type":"NameExpression","name":"string"},"name":"businessNetworkIdentifier"},{"title":"return","description":"A promise that indicates the connection is complete","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Connects and logs in to the Hyperledger Fabric using a named connection","profile. The connection profile must exist in the profile store."],"parameters":[{"description":"The name of the connection profile","type":"string","name":"connectionProfile","optional":true},{"description":"the enrollment ID of the user","type":"string","name":"enrollmentID","optional":true},{"description":"the enrollment secret of the user","type":"string","name":"enrollmentSecret","optional":true},{"description":"the id of the network (for update) or null","type":"string","name":"businessNetworkIdentifier","optional":true}],"return":{"description":["A promise that indicates the connection is complete"],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"createProfile","methodArgs":["string","Object"],"decorators":["example","param","param","return"],"throws":"","example":"// Create a connection profile\nvar adminConnection = new AdminConnection();\nvar adminOptions = {\n    type: 'hlf',\n    keyValStore: '/tmp/keyValStore',\n    membershipServicesURL: 'grpc://membersrvc:7054',\n    peerURL: 'grpc://vp0:7051',\n    eventHubURL: 'grpc://vp0:7053'\n};\nreturn adminConnection.createProfile('testprofile', adminOptions)\n.then(function(){\n    // Created profile\n})\n.catch(function(error){\n    // Add optional error handling here.\n});","commentData":{"description":"Stores a connection profile into the profile store being used by this\nAdminConnection.","tags":[{"title":"example","description":"// Create a connection profile\nvar adminConnection = new AdminConnection();\nvar adminOptions = {\n    type: 'hlf',\n    keyValStore: '/tmp/keyValStore',\n    membershipServicesURL: 'grpc://membersrvc:7054',\n    peerURL: 'grpc://vp0:7051',\n    eventHubURL: 'grpc://vp0:7053'\n};\nreturn adminConnection.createProfile('testprofile', adminOptions)\n.then(function(){\n    // Created profile\n})\n.catch(function(error){\n    // Add optional error handling here.\n});"},{"title":"param","description":"The name of the connection profile","type":{"type":"NameExpression","name":"string"},"name":"connectionProfile"},{"title":"param","description":"The connection profile data","type":{"type":"NameExpression","name":"Object"},"name":"data"},{"title":"return","description":"A promise that indicates that the connection profile is deployed","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Stores a connection profile into the profile store being used by this","AdminConnection."],"parameters":[{"description":"The name of the connection profile","type":"string","name":"connectionProfile","optional":true},{"description":"The connection profile data","type":"Object","name":"data","optional":true}],"return":{"description":["A promise that indicates that the connection profile is deployed"],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"deleteProfile","methodArgs":["string"],"decorators":["example","param","return"],"throws":"","example":"// Delete a connection profile\nvar adminConnection = new AdminConnection();\nreturn adminConnection.deleteProfile('testprofile')\n.then(function(){\n    // Deleted profile\n})\n.catch(function(error){\n    // Add optional error handling here.\n});","commentData":{"description":"Deletes the specified connection profile from the profile store being used by this\nAdminConnection.","tags":[{"title":"example","description":"// Delete a connection profile\nvar adminConnection = new AdminConnection();\nreturn adminConnection.deleteProfile('testprofile')\n.then(function(){\n    // Deleted profile\n})\n.catch(function(error){\n    // Add optional error handling here.\n});"},{"title":"param","description":"The name of the connection profile","type":{"type":"NameExpression","name":"string"},"name":"connectionProfile"},{"title":"return","description":"A promise that indicates that the connection profile is deployed","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Deletes the specified connection profile from the profile store being used by this","AdminConnection."],"parameters":[{"description":"The name of the connection profile","type":"string","name":"connectionProfile","optional":true}],"return":{"description":["A promise that indicates that the connection profile is deployed"],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"getProfile","methodArgs":["string"],"decorators":["example","param","return"],"throws":"","example":"// Retrieve the connection profile.\nconst adminConnection = new AdminConnection();\nreturn adminConnection.getProfile('testprofile')\n  .then((profile) => {\n    // Retrieved profile\n    console.log(profile);\n  });","commentData":{"description":"Retrieve the specified connection profile from the profile store being\nused by this AdminConnection.","tags":[{"title":"example","description":"// Retrieve the connection profile.\nconst adminConnection = new AdminConnection();\nreturn adminConnection.getProfile('testprofile')\n  .then((profile) => {\n    // Retrieved profile\n    console.log(profile);\n  });"},{"title":"param","description":"The name of the connection profile","type":{"type":"NameExpression","name":"string"},"name":"connectionProfile"},{"title":"return","description":"A promise that is resolved with the connection profile data.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Retrieve the specified connection profile from the profile store being","used by this AdminConnection."],"parameters":[{"description":"The name of the connection profile","type":"string","name":"connectionProfile","optional":true}],"return":{"description":["A promise that is resolved with the connection profile data."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"getAllProfiles","methodArgs":[],"decorators":["example","return"],"throws":"","example":"// Retrieve all the connection profiles.\nconst adminConnection = new AdminConnection();\nreturn adminConnection.getAllProfiles()\n  .then((profiles) => {\n    // Retrieved profiles\n    for (let profile in profiles) {\n      console.log(profile, profiles[profile]);\n    }\n  });","commentData":{"description":"Retrieve all connection profiles from the profile store being used by this\nAdminConnection.","tags":[{"title":"example","description":"// Retrieve all the connection profiles.\nconst adminConnection = new AdminConnection();\nreturn adminConnection.getAllProfiles()\n  .then((profiles) => {\n    // Retrieved profiles\n    for (let profile in profiles) {\n      console.log(profile, profiles[profile]);\n    }\n  });"},{"title":"return","description":"A promise that is resolved with the connection profile data.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Retrieve all connection profiles from the profile store being used by this","AdminConnection."],"parameters":[],"return":{"description":["A promise that is resolved with the connection profile data."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"disconnect","methodArgs":[],"decorators":["example","return"],"throws":"","example":"// Disconnect from a Business Network\nvar adminConnection = new AdminConnection();\nreturn adminConnection.disconnect()\n.then(function(){\n    // Disconnected.\n})\n.catch(function(error){\n    // Add optional error handling here.\n});","commentData":{"description":"Disconnects this connection.","tags":[{"title":"example","description":"// Disconnect from a Business Network\nvar adminConnection = new AdminConnection();\nreturn adminConnection.disconnect()\n.then(function(){\n    // Disconnected.\n})\n.catch(function(error){\n    // Add optional error handling here.\n});"},{"title":"return","description":"A promise that will be resolved when the connection is\nterminated.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Disconnects this connection."],"parameters":[],"return":{"description":["A promise that will be resolved when the connection is","terminated."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"install","methodArgs":["BusinessNetworkIdentifier","Object"],"decorators":["example","param","param","return"],"throws":"","example":"// Install the Hyperledger Composer runtime\nvar adminConnection = new AdminConnection();\nvar businessNetworkDefinition = BusinessNetworkDefinition.fromArchive(myArchive);\nreturn adminConnection.install(businessNetworkDefinition.getName())\n.then(function(){\n    // Business network definition installed\n})\n.catch(function(error){\n    // Add optional error handling here.\n});","commentData":{"description":"Installs the Hyperledger Composer runtime to the Hyperledger Fabric in preparation\nfor the business network to be started. The connection mustbe connected for this method to succeed.\nYou must pass the name of the business network that is defined in your archive that this\nruntime will be started with.","tags":[{"title":"example","description":"// Install the Hyperledger Composer runtime\nvar adminConnection = new AdminConnection();\nvar businessNetworkDefinition = BusinessNetworkDefinition.fromArchive(myArchive);\nreturn adminConnection.install(businessNetworkDefinition.getName())\n.then(function(){\n    // Business network definition installed\n})\n.catch(function(error){\n    // Add optional error handling here.\n});"},{"title":"param","description":"The name of business network which will be used to start this runtime.","type":{"type":"NameExpression","name":"BusinessNetworkIdentifier"},"name":"businessNetworkIdentifier"},{"title":"param","description":"connector specific install options","type":{"type":"NameExpression","name":"Object"},"name":"installOptions"},{"title":"return","description":"A promise that will be fufilled when the business network has been\ndeployed.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Installs the Hyperledger Composer runtime to the Hyperledger Fabric in preparation","for the business network to be started. The connection mustbe connected for this method to succeed.","You must pass the name of the business network that is defined in your archive that this","runtime will be started with."],"parameters":[{"description":"The name of business network which will be used to start this runtime.","type":"BusinessNetworkIdentifier","name":"businessNetworkIdentifier","optional":true},{"description":"connector specific install options","type":"Object","name":"installOptions","optional":true}],"return":{"description":["A promise that will be fufilled when the business network has been","deployed."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"start","methodArgs":["BusinessNetworkDefinition","Object"],"decorators":["example","param","param","return"],"throws":"","example":"// Start a Business Network Definition\nvar adminConnection = new AdminConnection();\nvar businessNetworkDefinition = BusinessNetworkDefinition.fromArchive(myArchive);\nreturn adminConnection.start(businessNetworkDefinition)\n.then(function(){\n    // Business network definition is started\n})\n.catch(function(error){\n    // Add optional error handling here.\n});","commentData":{"description":"Starts a business network within the runtime previously installed to the Hyperledger Fabric with\nthe same name as the business network to be started. The connection must be connected for this\nmethod to succeed.","tags":[{"title":"example","description":"// Start a Business Network Definition\nvar adminConnection = new AdminConnection();\nvar businessNetworkDefinition = BusinessNetworkDefinition.fromArchive(myArchive);\nreturn adminConnection.start(businessNetworkDefinition)\n.then(function(){\n    // Business network definition is started\n})\n.catch(function(error){\n    // Add optional error handling here.\n});"},{"title":"param","description":"The business network to start","type":{"type":"NameExpression","name":"BusinessNetworkDefinition"},"name":"businessNetworkDefinition"},{"title":"param","description":"connector specific start options","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Object"}},"name":"startOptions"},{"title":"return","description":"A promise that will be fufilled when the business network has been\ndeployed.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Starts a business network within the runtime previously installed to the Hyperledger Fabric with","the same name as the business network to be started. The connection must be connected for this","method to succeed."],"parameters":[{"description":"The business network to start","type":"BusinessNetworkDefinition","name":"businessNetworkDefinition","optional":true},{"description":"connector specific start options","type":"Object","name":"startOptions","optional":true}],"return":{"description":["A promise that will be fufilled when the business network has been","deployed."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"deploy","methodArgs":["BusinessNetworkDefinition","Object"],"decorators":["example","param","param","return"],"throws":"","example":"// Deploy a Business Network Definition\nvar adminConnection = new AdminConnection();\nvar businessNetworkDefinition = BusinessNetworkDefinition.fromArchive(myArchive);\nreturn adminConnection.deploy(businessNetworkDefinition)\n.then(function(){\n    // Business network definition deployed\n})\n.catch(function(error){\n    // Add optional error handling here.\n});","commentData":{"description":"Deploys a new BusinessNetworkDefinition to the Hyperledger Fabric. The connection must\nbe connected for this method to succeed.","tags":[{"title":"example","description":"// Deploy a Business Network Definition\nvar adminConnection = new AdminConnection();\nvar businessNetworkDefinition = BusinessNetworkDefinition.fromArchive(myArchive);\nreturn adminConnection.deploy(businessNetworkDefinition)\n.then(function(){\n    // Business network definition deployed\n})\n.catch(function(error){\n    // Add optional error handling here.\n});"},{"title":"param","description":"The business network to deploy","type":{"type":"NameExpression","name":"BusinessNetworkDefinition"},"name":"businessNetworkDefinition"},{"title":"param","description":"connector specific deployment options","type":{"type":"NameExpression","name":"Object"},"name":"deployOptions"},{"title":"return","description":"A promise that will be fufilled when the business network has been\ndeployed.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Deploys a new BusinessNetworkDefinition to the Hyperledger Fabric. The connection must","be connected for this method to succeed."],"parameters":[{"description":"The business network to deploy","type":"BusinessNetworkDefinition","name":"businessNetworkDefinition","optional":true},{"description":"connector specific deployment options","type":"Object","name":"deployOptions","optional":true}],"return":{"description":["A promise that will be fufilled when the business network has been","deployed."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"undeploy","methodArgs":["string"],"decorators":["example","param","return"],"throws":"","example":"// Undeploy a Business Network Definition\nvar adminConnection = new AdminConnection();\nreturn adminConnection.undeploy('identifier')\n.then(function(){\n    // Undeployed Business Network Definition\n})\n.catch(function(error){\n    // Add optional error handling here.\n})","commentData":{"description":"Undeploys a BusinessNetworkDefinition from the Hyperledger Fabric. The business network will no\nlonger be able to process transactions.","tags":[{"title":"example","description":"// Undeploy a Business Network Definition\nvar adminConnection = new AdminConnection();\nreturn adminConnection.undeploy('identifier')\n.then(function(){\n    // Undeployed Business Network Definition\n})\n.catch(function(error){\n    // Add optional error handling here.\n})"},{"title":"param","description":"The identifier of the network to undeploy","type":{"type":"NameExpression","name":"string"},"name":"businessNetworkIdentifier"},{"title":"return","description":"A promise that will be fufilled when the business network has been\nundeployed.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Undeploys a BusinessNetworkDefinition from the Hyperledger Fabric. The business network will no","longer be able to process transactions."],"parameters":[{"description":"The identifier of the network to undeploy","type":"string","name":"businessNetworkIdentifier","optional":true}],"return":{"description":["A promise that will be fufilled when the business network has been","undeployed."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"update","methodArgs":["BusinessNetworkDefinition"],"decorators":["example","param","return"],"throws":"","example":"// Updates a Business Network Definition\nvar adminConnection = new AdminConnection();\nvar businessNetworkDefinition = BusinessNetworkDefinition.fromArchive(myArchive);\nreturn adminConnection.update(businessNetworkDefinition)\n.then(function(){\n    // Business network definition updated\n})\n.catch(function(error){\n    // Add optional error handling here.\n});","commentData":{"description":"Updates an existing BusinessNetworkDefinition on the Hyperledger Fabric. The BusinessNetworkDefinition\nmust have been previously deployed.","tags":[{"title":"example","description":"// Updates a Business Network Definition\nvar adminConnection = new AdminConnection();\nvar businessNetworkDefinition = BusinessNetworkDefinition.fromArchive(myArchive);\nreturn adminConnection.update(businessNetworkDefinition)\n.then(function(){\n    // Business network definition updated\n})\n.catch(function(error){\n    // Add optional error handling here.\n});"},{"title":"param","description":"The new BusinessNetworkDefinition","type":{"type":"NameExpression","name":"BusinessNetworkDefinition"},"name":"businessNetworkDefinition"},{"title":"return","description":"A promise that will be fufilled when the business network has been\nupdated.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Updates an existing BusinessNetworkDefinition on the Hyperledger Fabric. The BusinessNetworkDefinition","must have been previously deployed."],"parameters":[{"description":"The new BusinessNetworkDefinition","type":"BusinessNetworkDefinition","name":"businessNetworkDefinition","optional":true}],"return":{"description":["A promise that will be fufilled when the business network has been","updated."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"upgrade","methodArgs":[],"decorators":["return","example","memberof"],"throws":"","example":"// Upgrade the Hyperledger Composer runtime\nvar adminConnection = new AdminConnection();\nvar businessNetworkDefinition = BusinessNetworkDefinition.fromArchive(myArchive);\nreturn adminConnection.connect(connectionProfileName, upgradeId, upgradeSecret, businessNetworkDefinition.getName())\n.then(() => {\n     return adminConnection.upgrade();\n})\n.then(() => {\n    // Business network definition upgraded\n})\n.catch((error) => {\n    // Add optional error handling here.\n});","commentData":{"description":"Upgrades an existing business network's composer runtime to a later level.\nThe connection must be connected specifying the business network identifier as part of the\nconnection for this method to succeed.","tags":[{"title":"return","description":"A promise that will be fufilled when the composer runtime has been upgraded,\nor rejected otherwise.","type":{"type":"NameExpression","name":"Promise"}},{"title":"example","description":"// Upgrade the Hyperledger Composer runtime\nvar adminConnection = new AdminConnection();\nvar businessNetworkDefinition = BusinessNetworkDefinition.fromArchive(myArchive);\nreturn adminConnection.connect(connectionProfileName, upgradeId, upgradeSecret, businessNetworkDefinition.getName())\n.then(() => {\n     return adminConnection.upgrade();\n})\n.then(() => {\n    // Business network definition upgraded\n})\n.catch((error) => {\n    // Add optional error handling here.\n});"},{"title":"memberof","description":"AdminConnection"}]},"description":["Upgrades an existing business network's composer runtime to a later level.","The connection must be connected specifying the business network identifier as part of the","connection for this method to succeed."],"parameters":[],"return":{"description":["A promise that will be fufilled when the composer runtime has been upgraded,","or rejected otherwise."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"ping","methodArgs":[],"decorators":["example","return"],"throws":"","example":"// Test the connection to the runtime\nvar adminConnection = new AdminConnection();\nreturn adminConnection.ping()\n.then(function(){\n    // Connection has been tested\n})\n.catch(function(error){\n    // Add optional error handling here.\n});","commentData":{"description":"Test the connection to the runtime and verify that the version of the\nruntime is compatible with this level of the node.js module.","tags":[{"title":"example","description":"// Test the connection to the runtime\nvar adminConnection = new AdminConnection();\nreturn adminConnection.ping()\n.then(function(){\n    // Connection has been tested\n})\n.catch(function(error){\n    // Add optional error handling here.\n});"},{"title":"return","description":"A promise that will be fufilled when the connection has\nbeen tested. The promise will be rejected if the version is incompatible.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Test the connection to the runtime and verify that the version of the","runtime is compatible with this level of the node.js module."],"parameters":[],"return":{"description":["A promise that will be fufilled when the connection has","been tested. The promise will be rejected if the version is incompatible."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"setLogLevel","methodArgs":["any"],"decorators":["example","param","returns","memberof"],"throws":"","example":"// Set the logging level of a business network.\nvar adminConnection = new AdminConnection();\nreturn adminConnection.setLogLevel('DEBUG')\n.then(() => {\n    console.log('log level set to DEBUG');\n})\n.catch(function(error){\n    // Add optional error handling here.\n});","commentData":{"description":"Set the logging level of a business network. The connection must\nbe connected for this method to succeed.","tags":[{"title":"example","description":"// Set the logging level of a business network.\nvar adminConnection = new AdminConnection();\nreturn adminConnection.setLogLevel('DEBUG')\n.then(() => {\n    console.log('log level set to DEBUG');\n})\n.catch(function(error){\n    // Add optional error handling here.\n});"},{"title":"param","description":"new logging level","type":{"type":"NameExpression","name":"any"},"name":"newLogLevel"},{"title":"returns","description":"A promise that resolves if successful.","type":{"type":"NameExpression","name":"Promise"}},{"title":"memberof","description":"AdminConnection"}]},"description":["Set the logging level of a business network. The connection must","be connected for this method to succeed."],"parameters":[{"description":"new logging level","type":"any","name":"newLogLevel","optional":true}],"return":{"description":["A promise that resolves if successful."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"getLogLevel","methodArgs":[],"decorators":["example","returns","memberof"],"throws":"","example":"// Get the current logging level of a business network.\nvar adminConnection = new AdminConnection();\nreturn adminConnection.getLogLevel()\n.then((currentLogLevel) => {\n    console.log('current log level is ' + currentLogLevel);\n})\n.catch(function(error){\n    // Add optional error handling here.\n});","commentData":{"description":"Get the current logging level of a business network. The connection must\nbe connected for this method to succeed.","tags":[{"title":"example","description":"// Get the current logging level of a business network.\nvar adminConnection = new AdminConnection();\nreturn adminConnection.getLogLevel()\n.then((currentLogLevel) => {\n    console.log('current log level is ' + currentLogLevel);\n})\n.catch(function(error){\n    // Add optional error handling here.\n});"},{"title":"returns","description":"A promise that resolves with the current logging level if successful.","type":{"type":"NameExpression","name":"Promise"}},{"title":"memberof","description":"AdminConnection"}]},"description":["Get the current logging level of a business network. The connection must","be connected for this method to succeed."],"parameters":[],"return":{"description":["A promise that resolves with the current logging level if successful."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"list","methodArgs":[],"decorators":["example","return"],"throws":"","example":"// List all of the deployed business networks.\nvar adminConnection = new AdminConnection();\nreturn adminConnection.list()\n.then((businessNetworks) => {\n    // Connection has been tested\n    return businessNetworks.forEach((businessNetwork) => {\n      console.log('Deployed business network', businessNetwork);\n    });\n})\n.catch(function(error){\n    // Add optional error handling here.\n});","commentData":{"description":"List all of the deployed business networks. The connection must\nbe connected for this method to succeed.","tags":[{"title":"example","description":"// List all of the deployed business networks.\nvar adminConnection = new AdminConnection();\nreturn adminConnection.list()\n.then((businessNetworks) => {\n    // Connection has been tested\n    return businessNetworks.forEach((businessNetwork) => {\n      console.log('Deployed business network', businessNetwork);\n    });\n})\n.catch(function(error){\n    // Add optional error handling here.\n});"},{"title":"return","description":"A promise that will be resolved with an array of\nbusiness network identifiers, or rejected with an error.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["List all of the deployed business networks. The connection must","be connected for this method to succeed."],"parameters":[],"return":{"description":["A promise that will be resolved with an array of","business network identifiers, or rejected with an error."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"importIdentity","methodArgs":["string","string","string","string"],"decorators":["example","param","param","param","param","returns"],"throws":"","example":"// Import an identity into a profiles' wallet\nvar adminConnection = new AdminConnection();\nreturn adminConnection.importIdentity('hlfv1', 'PeerAdmin', certificate, privateKey)\n.then(() => {\n    // Identity imported\n    console.log('identity imported successfully');\n})\n.catch(function(error){\n    // Add optional error handling here.\n});","commentData":{"description":"Import an identity into a profiles' wallet. No connection needs to be established\nfor this method to succeed.","tags":[{"title":"example","description":"// Import an identity into a profiles' wallet\nvar adminConnection = new AdminConnection();\nreturn adminConnection.importIdentity('hlfv1', 'PeerAdmin', certificate, privateKey)\n.then(() => {\n    // Identity imported\n    console.log('identity imported successfully');\n})\n.catch(function(error){\n    // Add optional error handling here.\n});"},{"title":"param","description":"Name of the connection profile","type":{"type":"NameExpression","name":"string"},"name":"connectionProfile"},{"title":"param","description":"The id to associate with this identity","type":{"type":"NameExpression","name":"string"},"name":"id"},{"title":"param","description":"The signer cert in PEM format","type":{"type":"NameExpression","name":"string"},"name":"certificate"},{"title":"param","description":"The private key in PEM format","type":{"type":"NameExpression","name":"string"},"name":"privateKey"},{"title":"returns","description":"A promise which is resolved when the identity is imported","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Import an identity into a profiles' wallet. No connection needs to be established","for this method to succeed."],"parameters":[{"description":"Name of the connection profile","type":"string","name":"connectionProfile","optional":true},{"description":"The id to associate with this identity","type":"string","name":"id","optional":true},{"description":"The signer cert in PEM format","type":"string","name":"certificate","optional":true},{"description":"The private key in PEM format","type":"string","name":"privateKey","optional":true}],"return":{"description":["A promise which is resolved when the identity is imported"],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"requestIdentity","methodArgs":["string","string","string"],"decorators":["example","param","param","param","returns"],"throws":"","example":"// Request the cryptographic material for am identity of a hlf v1 environment.\nvar adminConnection = new AdminConnection();\nreturn adminConnection.requestIdentity('hlfv1', 'admin', 'adminpw')\n.then((response) => {\n    // Identity returned\n    console.log('public signing certificate:');\n    console.log(response.certificate);\n    console.log('private key:');\n    console.log(response.key);\n    console.log('ca root certificate:');\n    console.log(response.rootCertificate);\n})\n.catch(function(error){\n    // Add optional error handling here.\n});","commentData":{"description":"Request the certificates for an identity. No connection needs to be established\nfor this method to succeed.","tags":[{"title":"example","description":"// Request the cryptographic material for am identity of a hlf v1 environment.\nvar adminConnection = new AdminConnection();\nreturn adminConnection.requestIdentity('hlfv1', 'admin', 'adminpw')\n.then((response) => {\n    // Identity returned\n    console.log('public signing certificate:');\n    console.log(response.certificate);\n    console.log('private key:');\n    console.log(response.key);\n    console.log('ca root certificate:');\n    console.log(response.rootCertificate);\n})\n.catch(function(error){\n    // Add optional error handling here.\n});"},{"title":"param","description":"Name of the connection profile","type":{"type":"NameExpression","name":"string"},"name":"connectionProfile"},{"title":"param","description":"The ID to enroll","type":{"type":"NameExpression","name":"string"},"name":"enrollmentID"},{"title":"param","description":"The secret for the ID","type":{"type":"NameExpression","name":"string"},"name":"enrollmentSecret"},{"title":"returns","description":"A promise which is resolved when the identity is imported","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Request the certificates for an identity. No connection needs to be established","for this method to succeed."],"parameters":[{"description":"Name of the connection profile","type":"string","name":"connectionProfile","optional":true},{"description":"The ID to enroll","type":"string","name":"enrollmentID","optional":true},{"description":"The secret for the ID","type":"string","name":"enrollmentSecret","optional":true}],"return":{"description":["A promise which is resolved when the identity is imported"],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"exportIdentity","methodArgs":["String","String"],"decorators":["param","param","return"],"throws":"","example":"","commentData":{"description":"Obtain the credentials associated with a given identity.","tags":[{"title":"param","description":"Name of the connection profile.","type":{"type":"NameExpression","name":"String"},"name":"connectionProfileName"},{"title":"param","description":"Name of the identity.","type":{"type":"NameExpression","name":"String"},"name":"id"},{"title":"return","description":"Resolves to credentials in the form <em>{ certificate: String, privateKey: String }</em>.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Obtain the credentials associated with a given identity."],"parameters":[{"description":"Name of the connection profile.","type":"String","name":"connectionProfileName","optional":true},{"description":"Name of the identity.","type":"String","name":"id","optional":true}],"return":{"description":["Resolves to credentials in the form <em>{ certificate: String, privateKey: String }</em>."],"type":"Promise"}}],"description":["This class creates an administration connection to a Hyperledger Composer runtime. The","connection can then be used to:","<ul>","<li>Deploy BusinessNetworkDefinitions</li>","<li>Undeploy BusinessNetworkDefinitions</li>","<li>Update BusinessNetworkDefinitions</li>","<li>Send a ping message to the runtime to ensure it is running and","correctly configured.</li>","<li>Store a connection profile document in the connection profile store</li>","</ul>"],"seeAlso":[],"visibility":"public","module":"admin"}