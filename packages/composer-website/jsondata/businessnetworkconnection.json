{"name":"BusinessNetworkConnection","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":["Object","ConnectionProfileStore","Object"],"decorators":["param","param","param"],"throws":"","example":"","commentData":{"description":"Create an instance of the BusinessNetworkConnection class.\nmust be called to connect to a deployed BusinessNetworkDefinition.","tags":[{"title":"param","description":"an optional set of options to configure the instance.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Object"}},"name":"options"},{"title":"param","description":"specify a connection profile store to use.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"ConnectionProfileStore"}},"name":"options.connectionProfileStore"},{"title":"param","description":"specify an fs implementation to use.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Object"}},"name":"options.fs"}]},"description":["Create an instance of the BusinessNetworkConnection class.","must be called to connect to a deployed BusinessNetworkDefinition."],"parameters":[{"description":"an optional set of options to configure the instance.","type":"Object","name":"options","optional":true},{"description":"specify a connection profile store to use.","type":"ConnectionProfileStore","name":"options.connectionProfileStore","optional":true},{"description":"specify an fs implementation to use.","type":"Object","name":"options.fs","optional":true}]},{"visibility":"+","returnType":"BusinessNetworkDefinition","name":"getBusinessNetwork","methodArgs":[],"decorators":["example","returns"],"throws":"","example":"// Get the Business Network Definition\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.getBusinessNetwork();\n})\n.then(function(BusinessNetworkDefinition){\n    // Retrieved Business Network Definition\n});","commentData":{"description":"Returns the currently connected BusinessNetworkDefinition","tags":[{"title":"example","description":"// Get the Business Network Definition\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.getBusinessNetwork();\n})\n.then(function(BusinessNetworkDefinition){\n    // Retrieved Business Network Definition\n});"},{"title":"returns","description":"the business network","type":{"type":"NameExpression","name":"BusinessNetworkDefinition"}}]},"description":["Returns the currently connected BusinessNetworkDefinition"],"parameters":[],"return":{"description":["the business network"],"type":"BusinessNetworkDefinition"}},{"visibility":"+","returnType":"Promise","name":"getAllAssetRegistries","methodArgs":["boolean"],"decorators":["example","return","param"],"throws":"","example":"// Get all asset registries\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.getAllAssetRegistries();\n})\n.then(function(assetRegistries){\n    // Retrieved Asset Registries\n});","commentData":{"description":"Get a list of all existing asset registries.","tags":[{"title":"example","description":"// Get all asset registries\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.getAllAssetRegistries();\n})\n.then(function(assetRegistries){\n    // Retrieved Asset Registries\n});"},{"title":"return","description":"A promise that will be resolved with a list of existing\nasset registries","type":{"type":"NameExpression","name":"Promise"}},{"title":"param","description":"if true the returned list will include the system transaction registries (optional, default to false)","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"boolean"}},"name":"includeSystem"}]},"description":["Get a list of all existing asset registries."],"parameters":[{"description":"if true the returned list will include the system transaction registries (optional, default to false)","type":"boolean","name":"includeSystem","optional":true}],"return":{"description":["A promise that will be resolved with a list of existing","asset registries"],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"getAssetRegistry","methodArgs":["string"],"decorators":["example","param","return"],"throws":"","example":"// Get a asset registry\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.getAssetRegistry('businessNetworkIdentifier.registryId');\n})\n.then(function(assetRegistry){\n    // Retrieved Asset Registry\n});","commentData":{"description":"Get an existing asset registry.","tags":[{"title":"example","description":"// Get a asset registry\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.getAssetRegistry('businessNetworkIdentifier.registryId');\n})\n.then(function(assetRegistry){\n    // Retrieved Asset Registry\n});"},{"title":"param","description":"The unique identifier of the asset registry","type":{"type":"NameExpression","name":"string"},"name":"id"},{"title":"return","description":"A promise that will be resolved with the existing asset\nregistry, or rejected if the asset registry does not exist.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Get an existing asset registry."],"parameters":[{"description":"The unique identifier of the asset registry","type":"string","name":"id","optional":true}],"return":{"description":["A promise that will be resolved with the existing asset","registry, or rejected if the asset registry does not exist."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"assetRegistryExists","methodArgs":["string"],"decorators":["example","param","return"],"throws":"","example":"// Determine whether an asset registry exists\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.assetRegistryExists('businessNetworkIdentifier.registryId');\n})\n.then(function(exists){\n    // if (exists === true) {\n    // logic here...\n    //}\n});","commentData":{"description":"Determine whether a asset registry exists.","tags":[{"title":"example","description":"// Determine whether an asset registry exists\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.assetRegistryExists('businessNetworkIdentifier.registryId');\n})\n.then(function(exists){\n    // if (exists === true) {\n    // logic here...\n    //}\n});"},{"title":"param","description":"The unique identifier of the asset registry","type":{"type":"NameExpression","name":"string"},"name":"id"},{"title":"return","description":"A promise that will be resolved with a boolean indicating whether the asset\nregistry exists.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Determine whether a asset registry exists."],"parameters":[{"description":"The unique identifier of the asset registry","type":"string","name":"id","optional":true}],"return":{"description":["A promise that will be resolved with a boolean indicating whether the asset","registry exists."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"addAssetRegistry","methodArgs":["string","string"],"decorators":["example","param","param","return"],"throws":"","example":"// Add a new asset registry\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.addAssetRegistry('registryId','registryName');\n});","commentData":{"description":"Add a new asset registry.","tags":[{"title":"example","description":"// Add a new asset registry\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.addAssetRegistry('registryId','registryName');\n});"},{"title":"param","description":"The unique identifier of the asset registry","type":{"type":"NameExpression","name":"string"},"name":"id"},{"title":"param","description":"The name of the asset registry","type":{"type":"NameExpression","name":"string"},"name":"name"},{"title":"return","description":"A promise that will be resolved with the new asset\nregistry after it has been added.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Add a new asset registry."],"parameters":[{"description":"The unique identifier of the asset registry","type":"string","name":"id","optional":true},{"description":"The name of the asset registry","type":"string","name":"name","optional":true}],"return":{"description":["A promise that will be resolved with the new asset","registry after it has been added."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"getAllParticipantRegistries","methodArgs":["boolean"],"decorators":["example","return","param"],"throws":"","example":"// Get all participant registries\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.getAllParticipantRegistries();\n})\n.then(function(participantRegistries){\n    // Retrieved Participant Registries\n});","commentData":{"description":"Get a list of all existing participant registries.","tags":[{"title":"example","description":"// Get all participant registries\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.getAllParticipantRegistries();\n})\n.then(function(participantRegistries){\n    // Retrieved Participant Registries\n});"},{"title":"return","description":"A promise that will be resolved with a list of existing\nparticipant registries","type":{"type":"NameExpression","name":"Promise"}},{"title":"param","description":"if true the returned list will include the system transaction registries (optional, default to false)","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"boolean"}},"name":"includeSystem"}]},"description":["Get a list of all existing participant registries."],"parameters":[{"description":"if true the returned list will include the system transaction registries (optional, default to false)","type":"boolean","name":"includeSystem","optional":true}],"return":{"description":["A promise that will be resolved with a list of existing","participant registries"],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"getParticipantRegistry","methodArgs":["string"],"decorators":["example","param","return"],"throws":"","example":"// Get a participant registry\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.getParticipantRegistry('businessNetworkIdentifier.registryId');\n})\n.then(function(participantRegistry){\n    // Retrieved Participant Registry\n});","commentData":{"description":"Get an existing participant registry.","tags":[{"title":"example","description":"// Get a participant registry\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.getParticipantRegistry('businessNetworkIdentifier.registryId');\n})\n.then(function(participantRegistry){\n    // Retrieved Participant Registry\n});"},{"title":"param","description":"The unique identifier of the participant registry","type":{"type":"NameExpression","name":"string"},"name":"id"},{"title":"return","description":"A promise that will be resolved with the existing participant\nregistry, or rejected if the participant registry does not exist.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Get an existing participant registry."],"parameters":[{"description":"The unique identifier of the participant registry","type":"string","name":"id","optional":true}],"return":{"description":["A promise that will be resolved with the existing participant","registry, or rejected if the participant registry does not exist."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"participantRegistryExists","methodArgs":["string"],"decorators":["example","param","return"],"throws":"","example":"// Determine whether an asset registry exists\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.participantRegistryExists('businessNetworkIdentifier.registryId');\n})\n.then(function(exists){\n    // if (exists === true) {\n    // logic here...\n    //}\n});","commentData":{"description":"Determine whether a participant registry exists.","tags":[{"title":"example","description":"// Determine whether an asset registry exists\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.participantRegistryExists('businessNetworkIdentifier.registryId');\n})\n.then(function(exists){\n    // if (exists === true) {\n    // logic here...\n    //}\n});"},{"title":"param","description":"The unique identifier of the participant registry","type":{"type":"NameExpression","name":"string"},"name":"id"},{"title":"return","description":"A promise that will be resolved with a boolean indicating whether the participant\nregistry exists.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Determine whether a participant registry exists."],"parameters":[{"description":"The unique identifier of the participant registry","type":"string","name":"id","optional":true}],"return":{"description":["A promise that will be resolved with a boolean indicating whether the participant","registry exists."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"addParticipantRegistry","methodArgs":["string","string"],"decorators":["example","param","param","return"],"throws":"","example":"// Add a new participant registry\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.addParticipantRegistry('registryId','registryName');\n});","commentData":{"description":"Add a new participant registry.","tags":[{"title":"example","description":"// Add a new participant registry\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.addParticipantRegistry('registryId','registryName');\n});"},{"title":"param","description":"The unique identifier of the participant registry","type":{"type":"NameExpression","name":"string"},"name":"id"},{"title":"param","description":"The name of the participant registry","type":{"type":"NameExpression","name":"string"},"name":"name"},{"title":"return","description":"A promise that will be resolved with the new participant\nregistry after it has been added.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Add a new participant registry."],"parameters":[{"description":"The unique identifier of the participant registry","type":"string","name":"id","optional":true},{"description":"The name of the participant registry","type":"string","name":"name","optional":true}],"return":{"description":["A promise that will be resolved with the new participant","registry after it has been added."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"getTransactionRegistry","methodArgs":["string"],"decorators":["example","param","return","link"],"throws":"","example":"// Get the transaction registry\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.getTransactionRegistry('org.acme.exampleTransaction');\n})\n.then(function(transactionRegistry){\n    // Retrieved transaction registry.\n});","commentData":{"description":"Get the transaction registry.","tags":[{"title":"example","description":"// Get the transaction registry\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.getTransactionRegistry('org.acme.exampleTransaction');\n})\n.then(function(transactionRegistry){\n    // Retrieved transaction registry.\n});"},{"title":"param","description":"The unique identifier of the transaction registry","type":{"type":"NameExpression","name":"string"},"name":"id"},{"title":"return","description":"A promise that will be resolved to the {@link TransactionRegistry}","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Get the transaction registry."],"parameters":[{"description":"The unique identifier of the transaction registry","type":"string","name":"id","optional":true}],"return":{"description":["A promise that will be resolved to the {@link TransactionRegistry}"],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"getAllTransactionRegistries","methodArgs":["boolean"],"decorators":["example","param","return","link"],"throws":"","example":"// Get the transaction registry\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.getAllTransactionRegistries();\n})\n.then(function(transactionRegistries){\n    // Retrieved transaction Registries\n});","commentData":{"description":"Get all transaction registries.","tags":[{"title":"example","description":"// Get the transaction registry\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.getAllTransactionRegistries();\n})\n.then(function(transactionRegistries){\n    // Retrieved transaction Registries\n});"},{"title":"param","description":"if true the returned list will include the system transaction registries (optional, default to false)","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"boolean"}},"name":"includeSystem"},{"title":"return","description":"A promise that will be resolved to the {@link TransactionRegistry}","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Get all transaction registries."],"parameters":[{"description":"if true the returned list will include the system transaction registries (optional, default to false)","type":"boolean","name":"includeSystem","optional":true}],"return":{"description":["A promise that will be resolved to the {@link TransactionRegistry}"],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"transactionRegistryExists","methodArgs":["string"],"decorators":["example","param","return"],"throws":"","example":"// Determine whether an transaction registry exists\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetwork){\n    return businessNetwork.transactionRegistryExists('businessNetworkIdentifier.registryId');\n})\n.then(function(exists){\n    // if (exists === true) {\n    // logic here...\n    //}\n});","commentData":{"description":"Determine whether a transaction registry exists.","tags":[{"title":"example","description":"// Determine whether an transaction registry exists\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetwork){\n    return businessNetwork.transactionRegistryExists('businessNetworkIdentifier.registryId');\n})\n.then(function(exists){\n    // if (exists === true) {\n    // logic here...\n    //}\n});"},{"title":"param","description":"The unique identifier of the transaction registry","type":{"type":"NameExpression","name":"string"},"name":"id"},{"title":"return","description":"A promise that will be resolved with a boolean indicating whether the transaction\nregistry exists.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Determine whether a transaction registry exists."],"parameters":[{"description":"The unique identifier of the transaction registry","type":"string","name":"id","optional":true}],"return":{"description":["A promise that will be resolved with a boolean indicating whether the transaction","registry exists."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"getHistorian","methodArgs":[],"decorators":["example","return","link"],"throws":"","example":"// Get the historian\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.getHistorian();\n})\n.then(function(historian){\n    // Retrieved historian\n});","commentData":{"description":"Get the historian","tags":[{"title":"example","description":"// Get the historian\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.getHistorian();\n})\n.then(function(historian){\n    // Retrieved historian\n});"},{"title":"return","description":"A promise that will be resolved to the {@link Historian}","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Get the historian"],"parameters":[],"return":{"description":["A promise that will be resolved to the {@link Historian}"],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"getIdentityRegistry","methodArgs":[],"decorators":["example","return","link"],"throws":"","example":"// Get the identity registry\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.getIdentityRegistry();\n})\n.then(function(identityRegistry){\n    // Retrieved identity registry\n});","commentData":{"description":"Get the identity registry.","tags":[{"title":"example","description":"// Get the identity registry\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.getIdentityRegistry();\n})\n.then(function(identityRegistry){\n    // Retrieved identity registry\n});"},{"title":"return","description":"A promise that will be resolved to the {@link IdentityRegistry}","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Get the identity registry."],"parameters":[],"return":{"description":["A promise that will be resolved to the {@link IdentityRegistry}"],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"connect","methodArgs":["string","string","string","string","Object"],"decorators":["example","param","param","param","param","param","return"],"throws":"","example":"// Connect and log in to HLF\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    // Connected\n});","commentData":{"description":"Connects to a business network using a connection profile, and authenticates to the Hyperledger Fabric.","tags":[{"title":"example","description":"// Connect and log in to HLF\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    // Connected\n});"},{"title":"param","description":"The name of the connection profile","type":{"type":"NameExpression","name":"string"},"name":"connectionProfile"},{"title":"param","description":"The identifier of the business network","type":{"type":"NameExpression","name":"string"},"name":"businessNetwork"},{"title":"param","description":"the enrolment ID of the user","type":{"type":"NameExpression","name":"string"},"name":"enrollmentID"},{"title":"param","description":"the enrolment secret of the user","type":{"type":"NameExpression","name":"string"},"name":"enrollmentSecret"},{"title":"param","description":"Additional configuration options supplied\nat runtime that override options set in the connection profile.\nwhich will override those in the specified connection profile.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Object"}},"name":"additionalConnectOptions"},{"title":"return","description":"A promise to a BusinessNetworkDefinition that indicates the connection is complete","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Connects to a business network using a connection profile, and authenticates to the Hyperledger Fabric."],"parameters":[{"description":"The name of the connection profile","type":"string","name":"connectionProfile","optional":true},{"description":"The identifier of the business network","type":"string","name":"businessNetwork","optional":true},{"description":"the enrolment ID of the user","type":"string","name":"enrollmentID","optional":true},{"description":"the enrolment secret of the user","type":"string","name":"enrollmentSecret","optional":true},{"description":"Additional configuration options supplied\nat runtime that override options set in the connection profile.\nwhich will override those in the specified connection profile.","type":"Object","name":"additionalConnectOptions","optional":true}],"return":{"description":["A promise to a BusinessNetworkDefinition that indicates the connection is complete"],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"getRegistry","methodArgs":["String"],"decorators":["example","param","return"],"throws":"","example":"// Locate the registry for a fully qualififed name\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetwork){\n    var sampleAssetRegistry = businessNetwork.getRegistry('org.acme.sampleAsset');\n    var sampleTransactionRegistry = businessNetwork.getRegistry('org.acme.sampleTransaction');\n     var sampleParticipantRegistry = businessNetwork.getRegistry('org.acme.sampleParticipant');\n});","commentData":{"description":"Given a fully qualified name, works out and looks up the registry that this resource will be found in.\nThis only gives back the default registry - it does not look in any application defined registry.","tags":[{"title":"example","description":"// Locate the registry for a fully qualififed name\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetwork){\n    var sampleAssetRegistry = businessNetwork.getRegistry('org.acme.sampleAsset');\n    var sampleTransactionRegistry = businessNetwork.getRegistry('org.acme.sampleTransaction');\n     var sampleParticipantRegistry = businessNetwork.getRegistry('org.acme.sampleParticipant');\n});"},{"title":"param","description":"The fully qualified name of the resources","type":{"type":"NameExpression","name":"String"},"name":"fullyQualifiedName"},{"title":"return","description":"resolved with the registry that this fqn could be found in by default","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Given a fully qualified name, works out and looks up the registry that this resource will be found in.","This only gives back the default registry - it does not look in any application defined registry."],"parameters":[{"description":"The fully qualified name of the resources","type":"String","name":"fullyQualifiedName","optional":true}],"return":{"description":["resolved with the registry that this fqn could be found in by default"],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"disconnect","methodArgs":[],"decorators":["example","return"],"throws":"","example":"// Disconnects from HLF\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.disconnect();\n})\n.then(function(){\n    // Disconnected.\n});","commentData":{"description":"Disconnects from the Hyperledger Fabric.","tags":[{"title":"example","description":"// Disconnects from HLF\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetworkDefinition.disconnect();\n})\n.then(function(){\n    // Disconnected.\n});"},{"title":"return","description":"A promise that will be resolved when the connection is\nterminated.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Disconnects from the Hyperledger Fabric."],"parameters":[],"return":{"description":["A promise that will be resolved when the connection is","terminated."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"submitTransaction","methodArgs":["Resource"],"decorators":["example","param","link","return"],"throws":"","example":"// Submits a transaction\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    var factory = businessNetworkDefinition.getBusinessNetwork().getFactory();\n    var transaction = factory.newTransaction('network.transactions', 'TransactionType');\n    return businessNetworkDefinition.submitTransaction(transaction);\n})\n.then(function(){\n    // Submitted a transaction.\n});","commentData":{"description":"Submit a transaction for processing by the currently connected business network.","tags":[{"title":"example","description":"// Submits a transaction\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    var factory = businessNetworkDefinition.getBusinessNetwork().getFactory();\n    var transaction = factory.newTransaction('network.transactions', 'TransactionType');\n    return businessNetworkDefinition.submitTransaction(transaction);\n})\n.then(function(){\n    // Submitted a transaction.\n});"},{"title":"param","description":"The transaction to submit. Use {@link\nFactory#newTransaction newTransaction} to create this object.","type":{"type":"NameExpression","name":"Resource"},"name":"transaction"},{"title":"return","description":"A promise that will be fulfilled when the transaction has\nbeen processed.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Submit a transaction for processing by the currently connected business network."],"parameters":[{"description":"The transaction to submit. Use {@link\nFactory#newTransaction newTransaction} to create this object.","type":"Resource","name":"transaction","optional":true}],"return":{"description":["A promise that will be fulfilled when the transaction has","been processed."],"type":"Promise"}},{"visibility":"+","returnType":"Query","name":"buildQuery","methodArgs":["string"],"decorators":["example","param","return"],"throws":"","example":"// Build and execute a query.\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n  .then(function () {\n    var query = businessNetwork.buildQuery('SELECT org.acme.sample.SampleAsset WHERE (value == _$inputValue)');\n    return businessNetwork.query(query, { inputValue: 'blue' })\n  })\n  .then(function (assets) {\n    assets.forEach(function (asset) {\n      // Process each asset.\n    });\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Build a query ready for later execution. The specified query string must be written\nin the Composer query language.\n\nThis functionality is Blockchain platform dependent. For example, when a Composer\nbusiness network is deployed to Hyperledger Fabric v1.0, Hyperledger Fabric must be\nconfigured with the CouchDB database for the world state.","tags":[{"title":"example","description":"// Build and execute a query.\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n  .then(function () {\n    var query = businessNetwork.buildQuery('SELECT org.acme.sample.SampleAsset WHERE (value == _$inputValue)');\n    return businessNetwork.query(query, { inputValue: 'blue' })\n  })\n  .then(function (assets) {\n    assets.forEach(function (asset) {\n      // Process each asset.\n    });\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"param","description":"The query string, written using the Composer query language.","type":{"type":"NameExpression","name":"string"},"name":"query"},{"title":"return","description":"The built query, which can be passed in a call to query.","type":{"type":"NameExpression","name":"Query"}}]},"description":["Build a query ready for later execution. The specified query string must be written","in the Composer query language.","","This functionality is Blockchain platform dependent. For example, when a Composer","business network is deployed to Hyperledger Fabric v1.0, Hyperledger Fabric must be","configured with the CouchDB database for the world state."],"parameters":[{"description":"The query string, written using the Composer query language.","type":"string","name":"query","optional":true}],"return":{"description":["The built query, which can be passed in a call to query."],"type":"Query"}},{"visibility":"+","returnType":"Promise","name":"query","methodArgs":["Object"],"decorators":["example","param","param","return","link"],"throws":"","example":"// Execute the query.\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n  .then(function () {\n    return query('Q1', { inputValue: 'blue' })\n  })\n  .then(function (assets) {\n    assets.forEach(function (asset) {\n      // Process each asset.\n    });\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Execute a query defined in a Composer query file, or execute a query built with buildQuery.\n\nThis functionality is Blockchain platform dependent. For example, when a Composer\nbusiness network is deployed to Hyperledger Fabric v1.0, Hyperledger Fabric must be\nconfigured with the CouchDB database for the world state.","tags":[{"title":"example","description":"// Execute the query.\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n  .then(function () {\n    return query('Q1', { inputValue: 'blue' })\n  })\n  .then(function (assets) {\n    assets.forEach(function (asset) {\n      // Process each asset.\n    });\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"param","description":"The name of the query, or a built query.","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"string"},{"type":"NameExpression","name":"Query"}]},"name":"query"},{"title":"param","description":"The parameters for the query.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Object"}},"name":"parameters"},{"title":"return","description":"A promise that will be resolved with an array of\n{@link module:composer-common.Resource Resource} representing the\nresources returned by the query.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Execute a query defined in a Composer query file, or execute a query built with buildQuery.","","This functionality is Blockchain platform dependent. For example, when a Composer","business network is deployed to Hyperledger Fabric v1.0, Hyperledger Fabric must be","configured with the CouchDB database for the world state."],"parameters":[{"description":"The name of the query, or a built query.","name":"query","optional":true},{"description":"The parameters for the query.","type":"Object","name":"parameters","optional":true}],"return":{"description":["A promise that will be resolved with an array of","{@link module:composer-common.Resource Resource} representing the","resources returned by the query."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"ping","methodArgs":[],"decorators":["example","return"],"throws":"","example":"// Test the connection to the runtime\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetwork.ping();\n})\n.then(function(){\n    // Connection tested.\n});","commentData":{"description":"Test the connection to the runtime and verify that the version of the\nruntime is compatible with this level of the client node.js module.","tags":[{"title":"example","description":"// Test the connection to the runtime\nvar businessNetwork = new BusinessNetworkConnection();\nreturn businessNetwork.connect('testprofile', 'businessNetworkIdentifier', 'WebAppAdmin', 'DJY27pEnl16d')\n.then(function(businessNetworkDefinition){\n    return businessNetwork.ping();\n})\n.then(function(){\n    // Connection tested.\n});"},{"title":"return","description":"A promise that will be fulfilled when the connection has\nbeen tested. The promise will be rejected if the version is incompatible.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Test the connection to the runtime and verify that the version of the","runtime is compatible with this level of the client node.js module."],"parameters":[],"return":{"description":["A promise that will be fulfilled when the connection has","been tested. The promise will be rejected if the version is incompatible."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"issueIdentity","methodArgs":["string","object","boolean"],"decorators":["param","param","param","param","return"],"throws":"","example":"","commentData":{"description":"Issue an identity with the specified name and map it to the specified\nparticipant.","tags":[{"title":"param","description":"The participant, a\nrelationship to the participant, or the fully qualified identifier of\nthe participant. The participant must already exist.","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Resource"},{"type":"NameExpression","name":"Relationship"},{"type":"NameExpression","name":"string"}]},"name":"participant"},{"title":"param","description":"The name for the new identity.","type":{"type":"NameExpression","name":"string"},"name":"identityName"},{"title":"param","description":"Options for the new identity.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"object"}},"name":"options"},{"title":"param","description":"Whether or not the new identity should have\npermissions to create additional new identities. False by default.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"boolean"}},"name":"options.issuer"},{"title":"return","description":"A promise that will be fulfilled when the identity has\nbeen added to the specified participant. The promise will be rejected if\nthe participant does not exist, or if the identity is already mapped to\nanother participant.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Issue an identity with the specified name and map it to the specified","participant."],"parameters":[{"description":"The participant, a\nrelationship to the participant, or the fully qualified identifier of\nthe participant. The participant must already exist.","name":"participant","optional":true},{"description":"The name for the new identity.","type":"string","name":"identityName","optional":true},{"description":"Options for the new identity.","type":"object","name":"options","optional":true},{"description":"Whether or not the new identity should have\npermissions to create additional new identities. False by default.","type":"boolean","name":"options.issuer","optional":true}],"return":{"description":["A promise that will be fulfilled when the identity has","been added to the specified participant. The promise will be rejected if","the participant does not exist, or if the identity is already mapped to","another participant."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"bindIdentity","methodArgs":["string"],"decorators":["param","param","return"],"throws":"","example":"","commentData":{"description":"Bind an existing identity to the specified participant.","tags":[{"title":"param","description":"The participant, or the fully qualified\nidentifier of the participant. The participant must already exist.","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Resource"},{"type":"NameExpression","name":"string"}]},"name":"participant"},{"title":"param","description":"The certificate for the existing identity.","type":{"type":"NameExpression","name":"string"},"name":"certificate"},{"title":"return","description":"A promise that will be fulfilled when the identity has\nbeen added to the specified participant. The promise will be rejected if\nthe participant does not exist, or if the identity is already mapped to\nanother participant.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Bind an existing identity to the specified participant."],"parameters":[{"description":"The participant, or the fully qualified\nidentifier of the participant. The participant must already exist.","name":"participant","optional":true},{"description":"The certificate for the existing identity.","type":"string","name":"certificate","optional":true}],"return":{"description":["A promise that will be fulfilled when the identity has","been added to the specified participant. The promise will be rejected if","the participant does not exist, or if the identity is already mapped to","another participant."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"revokeIdentity","methodArgs":[],"decorators":["param","return"],"throws":"","example":"","commentData":{"description":"Revoke the specified identity by removing any existing mapping to a participant.","tags":[{"title":"param","description":"The identity, or the identifier of the identity.","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Resource"},{"type":"NameExpression","name":"string"}]},"name":"identity"},{"title":"return","description":"A promise that will be fulfilled when the identity has\nbeen removed from the specified participant. The promise will be rejected if\nthe participant does not exist, or if the identity is not mapped to the\nparticipant.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Revoke the specified identity by removing any existing mapping to a participant."],"parameters":[{"description":"The identity, or the identifier of the identity.","name":"identity","optional":true}],"return":{"description":["A promise that will be fulfilled when the identity has","been removed from the specified participant. The promise will be rejected if","the participant does not exist, or if the identity is not mapped to the","participant."],"type":"Promise"}}],"superClass":"EventEmitter","description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.","Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"seeAlso":[],"visibility":"public","extends":"EventEmitter","module":"client"}