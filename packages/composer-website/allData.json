{"admin":[{"name":"AdminConnection","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"createProfile","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"importCard","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getAllCards","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"deleteCard","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"deleteProfile","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getProfile","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getAllProfiles","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"connect","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"disconnect","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"install","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"_getCurrentIdentity","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"_generateBootstrapTransactions","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"_buildStartTransaction","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"start","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"deploy","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"undeploy","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"update","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"reset","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"upgrade","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"ping","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"pingInner","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"activate","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"setLogLevel","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getLogLevel","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"list","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"importIdentity","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"requestIdentity","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"exportIdentity","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n<ul>\n<li>Deploy BusinessNetworkDefinitions</li>\n<li>Undeploy BusinessNetworkDefinitions</li>\n<li>Update BusinessNetworkDefinitions</li>\n<li>Send a ping message to the runtime to ensure it is running and\ncorrectly configured.</li>\n<li>Store a connection profile document in the connection profile store</li>\n</ul>\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..).\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"parameters":[],"suboptions":[]}],"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to: <ul> <li>Deploy BusinessNetworkDefinitions</li> <li>Undeploy BusinessNetworkDefinitions</li> <li>Update BusinessNetworkDefinitions</li> <li>Send a ping message to the runtime to ensure it is running and correctly configured.</li> <li>Store a connection profile document in the connection profile store</li> </ul> Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call disconnect(..) then connect(..). Calling an api after disconnect and before connect will give an error."],"seeAlso":[],"visibility":"public","module":"admin"}],"client":[{"name":"AssetRegistry","commentData":{"description":"The AssetRegistry is used to manage a set of assets stored on the Blockchain.\n<p><a href=\"./diagrams/assetregistry.svg\"><img src=\"./diagrams/assetregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"methods":[{"visibility":"+","returnType":"void","name":"getAllAssetRegistries","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The AssetRegistry is used to manage a set of assets stored on the Blockchain.\n<p><a href=\"./diagrams/assetregistry.svg\"><img src=\"./diagrams/assetregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The AssetRegistry is used to manage a set of assets stored on the Blockchain. <p><a href=\"./diagrams/assetregistry.svg\"><img src=\"./diagrams/assetregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getAssetRegistry","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The AssetRegistry is used to manage a set of assets stored on the Blockchain.\n<p><a href=\"./diagrams/assetregistry.svg\"><img src=\"./diagrams/assetregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The AssetRegistry is used to manage a set of assets stored on the Blockchain. <p><a href=\"./diagrams/assetregistry.svg\"><img src=\"./diagrams/assetregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"assetRegistryExists","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The AssetRegistry is used to manage a set of assets stored on the Blockchain.\n<p><a href=\"./diagrams/assetregistry.svg\"><img src=\"./diagrams/assetregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The AssetRegistry is used to manage a set of assets stored on the Blockchain. <p><a href=\"./diagrams/assetregistry.svg\"><img src=\"./diagrams/assetregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"addAssetRegistry","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The AssetRegistry is used to manage a set of assets stored on the Blockchain.\n<p><a href=\"./diagrams/assetregistry.svg\"><img src=\"./diagrams/assetregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The AssetRegistry is used to manage a set of assets stored on the Blockchain. <p><a href=\"./diagrams/assetregistry.svg\"><img src=\"./diagrams/assetregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The AssetRegistry is used to manage a set of assets stored on the Blockchain.\n<p><a href=\"./diagrams/assetregistry.svg\"><img src=\"./diagrams/assetregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The AssetRegistry is used to manage a set of assets stored on the Blockchain. <p><a href=\"./diagrams/assetregistry.svg\"><img src=\"./diagrams/assetregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]}],"superClass":"Registry","description":["The AssetRegistry is used to manage a set of assets stored on the Blockchain. <p><a href=\"./diagrams/assetregistry.svg\"><img src=\"./diagrams/assetregistry.svg\" style=\"height:100%;\"/></a></p>"],"seeAlso":["See [Registry](registry)"],"visibility":"public","extends":"Registry","module":"client"},{"name":"BusinessNetworkConnection","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getBusinessNetwork","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getAllAssetRegistries","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getAssetRegistry","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"assetRegistryExists","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"addAssetRegistry","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getAllParticipantRegistries","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getParticipantRegistry","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"participantRegistryExists","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"addParticipantRegistry","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getTransactionRegistry","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getAllTransactionRegistries","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"transactionRegistryExists","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getHistorian","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getIdentityRegistry","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"connect","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getRegistry","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"disconnect","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"submitTransaction","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"buildQuery","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"query","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"ping","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"pingInner","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"activate","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"issueIdentity","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"bindIdentity","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"revokeIdentity","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"Use this class to connect to and then interact with a deployed BusinessNetworkDefinition.\nUse the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions.","tags":[{"title":"extends","description":null,"type":null,"name":"EventEmitter"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"parameters":[],"suboptions":[]}],"superClass":"EventEmitter","description":["Use this class to connect to and then interact with a deployed BusinessNetworkDefinition. Use the AdminConnection class in the composer-admin module to deploy BusinessNetworksDefinitions."],"seeAlso":[],"visibility":"public","extends":"EventEmitter","module":"client"},{"name":"Historian","commentData":{"description":"The Historian records the history of actions taken using Composer.\nIt is a registry that stores HistorianRecords; each record is created in response\nto a transaction being executred.\n\nAs well as the transactions that are defined in the Network model other actions such\nas adding assets are treated as transactions so are therefore recorded.\n\nDetails of these are in the system model.","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"methods":[{"visibility":"+","returnType":"void","name":"getHistorian","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The Historian records the history of actions taken using Composer.\nIt is a registry that stores HistorianRecords; each record is created in response\nto a transaction being executred.\n\nAs well as the transactions that are defined in the Network model other actions such\nas adding assets are treated as transactions so are therefore recorded.\n\nDetails of these are in the system model.","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The Historian records the history of actions taken using Composer. It is a registry that stores HistorianRecords; each record is created in response to a transaction being executred.","As well as the transactions that are defined in the Network model other actions such as adding assets are treated as transactions so are therefore recorded.","Details of these are in the system model."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The Historian records the history of actions taken using Composer.\nIt is a registry that stores HistorianRecords; each record is created in response\nto a transaction being executred.\n\nAs well as the transactions that are defined in the Network model other actions such\nas adding assets are treated as transactions so are therefore recorded.\n\nDetails of these are in the system model.","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The Historian records the history of actions taken using Composer. It is a registry that stores HistorianRecords; each record is created in response to a transaction being executred.","As well as the transactions that are defined in the Network model other actions such as adding assets are treated as transactions so are therefore recorded.","Details of these are in the system model."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"add","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The Historian records the history of actions taken using Composer.\nIt is a registry that stores HistorianRecords; each record is created in response\nto a transaction being executred.\n\nAs well as the transactions that are defined in the Network model other actions such\nas adding assets are treated as transactions so are therefore recorded.\n\nDetails of these are in the system model.","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The Historian records the history of actions taken using Composer. It is a registry that stores HistorianRecords; each record is created in response to a transaction being executred.","As well as the transactions that are defined in the Network model other actions such as adding assets are treated as transactions so are therefore recorded.","Details of these are in the system model."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"addAll","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The Historian records the history of actions taken using Composer.\nIt is a registry that stores HistorianRecords; each record is created in response\nto a transaction being executred.\n\nAs well as the transactions that are defined in the Network model other actions such\nas adding assets are treated as transactions so are therefore recorded.\n\nDetails of these are in the system model.","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The Historian records the history of actions taken using Composer. It is a registry that stores HistorianRecords; each record is created in response to a transaction being executred.","As well as the transactions that are defined in the Network model other actions such as adding assets are treated as transactions so are therefore recorded.","Details of these are in the system model."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"update","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The Historian records the history of actions taken using Composer.\nIt is a registry that stores HistorianRecords; each record is created in response\nto a transaction being executred.\n\nAs well as the transactions that are defined in the Network model other actions such\nas adding assets are treated as transactions so are therefore recorded.\n\nDetails of these are in the system model.","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The Historian records the history of actions taken using Composer. It is a registry that stores HistorianRecords; each record is created in response to a transaction being executred.","As well as the transactions that are defined in the Network model other actions such as adding assets are treated as transactions so are therefore recorded.","Details of these are in the system model."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"updateAll","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The Historian records the history of actions taken using Composer.\nIt is a registry that stores HistorianRecords; each record is created in response\nto a transaction being executred.\n\nAs well as the transactions that are defined in the Network model other actions such\nas adding assets are treated as transactions so are therefore recorded.\n\nDetails of these are in the system model.","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The Historian records the history of actions taken using Composer. It is a registry that stores HistorianRecords; each record is created in response to a transaction being executred.","As well as the transactions that are defined in the Network model other actions such as adding assets are treated as transactions so are therefore recorded.","Details of these are in the system model."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"remove","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The Historian records the history of actions taken using Composer.\nIt is a registry that stores HistorianRecords; each record is created in response\nto a transaction being executred.\n\nAs well as the transactions that are defined in the Network model other actions such\nas adding assets are treated as transactions so are therefore recorded.\n\nDetails of these are in the system model.","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The Historian records the history of actions taken using Composer. It is a registry that stores HistorianRecords; each record is created in response to a transaction being executred.","As well as the transactions that are defined in the Network model other actions such as adding assets are treated as transactions so are therefore recorded.","Details of these are in the system model."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"removeAll","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The Historian records the history of actions taken using Composer.\nIt is a registry that stores HistorianRecords; each record is created in response\nto a transaction being executred.\n\nAs well as the transactions that are defined in the Network model other actions such\nas adding assets are treated as transactions so are therefore recorded.\n\nDetails of these are in the system model.","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The Historian records the history of actions taken using Composer. It is a registry that stores HistorianRecords; each record is created in response to a transaction being executred.","As well as the transactions that are defined in the Network model other actions such as adding assets are treated as transactions so are therefore recorded.","Details of these are in the system model."],"parameters":[],"suboptions":[]}],"superClass":"Registry","description":["The Historian records the history of actions taken using Composer. It is a registry that stores HistorianRecords; each record is created in response to a transaction being executred.","As well as the transactions that are defined in the Network model other actions such as adding assets are treated as transactions so are therefore recorded.","Details of these are in the system model."],"seeAlso":["See [Registry](registry)"],"visibility":"public","extends":"Registry","module":"client"},{"name":"IdentityRegistry","commentData":{"description":"The IdentityRegistry is used to store a set of identities on the blockchain.\n<p><a href=\"./diagrams/identityregistry.svg\"><img src=\"./diagrams/identityregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"methods":[{"visibility":"+","returnType":"void","name":"getIdentityRegistry","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The IdentityRegistry is used to store a set of identities on the blockchain.\n<p><a href=\"./diagrams/identityregistry.svg\"><img src=\"./diagrams/identityregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The IdentityRegistry is used to store a set of identities on the blockchain. <p><a href=\"./diagrams/identityregistry.svg\"><img src=\"./diagrams/identityregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The IdentityRegistry is used to store a set of identities on the blockchain.\n<p><a href=\"./diagrams/identityregistry.svg\"><img src=\"./diagrams/identityregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The IdentityRegistry is used to store a set of identities on the blockchain. <p><a href=\"./diagrams/identityregistry.svg\"><img src=\"./diagrams/identityregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"add","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The IdentityRegistry is used to store a set of identities on the blockchain.\n<p><a href=\"./diagrams/identityregistry.svg\"><img src=\"./diagrams/identityregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The IdentityRegistry is used to store a set of identities on the blockchain. <p><a href=\"./diagrams/identityregistry.svg\"><img src=\"./diagrams/identityregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"addAll","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The IdentityRegistry is used to store a set of identities on the blockchain.\n<p><a href=\"./diagrams/identityregistry.svg\"><img src=\"./diagrams/identityregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The IdentityRegistry is used to store a set of identities on the blockchain. <p><a href=\"./diagrams/identityregistry.svg\"><img src=\"./diagrams/identityregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"update","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The IdentityRegistry is used to store a set of identities on the blockchain.\n<p><a href=\"./diagrams/identityregistry.svg\"><img src=\"./diagrams/identityregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The IdentityRegistry is used to store a set of identities on the blockchain. <p><a href=\"./diagrams/identityregistry.svg\"><img src=\"./diagrams/identityregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"updateAll","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The IdentityRegistry is used to store a set of identities on the blockchain.\n<p><a href=\"./diagrams/identityregistry.svg\"><img src=\"./diagrams/identityregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The IdentityRegistry is used to store a set of identities on the blockchain. <p><a href=\"./diagrams/identityregistry.svg\"><img src=\"./diagrams/identityregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"remove","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The IdentityRegistry is used to store a set of identities on the blockchain.\n<p><a href=\"./diagrams/identityregistry.svg\"><img src=\"./diagrams/identityregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The IdentityRegistry is used to store a set of identities on the blockchain. <p><a href=\"./diagrams/identityregistry.svg\"><img src=\"./diagrams/identityregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"removeAll","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The IdentityRegistry is used to store a set of identities on the blockchain.\n<p><a href=\"./diagrams/identityregistry.svg\"><img src=\"./diagrams/identityregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The IdentityRegistry is used to store a set of identities on the blockchain. <p><a href=\"./diagrams/identityregistry.svg\"><img src=\"./diagrams/identityregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]}],"superClass":"Registry","description":["The IdentityRegistry is used to store a set of identities on the blockchain. <p><a href=\"./diagrams/identityregistry.svg\"><img src=\"./diagrams/identityregistry.svg\" style=\"height:100%;\"/></a></p>"],"seeAlso":["See [Registry](registry)"],"visibility":"public","extends":"Registry","module":"client"},{"name":"ParticipantRegistry","commentData":{"description":"The ParticipantRegistry is used to manage a set of participants stored on the blockchain.\n<p><a href=\"./diagrams/participantregistry.svg\"><img src=\"./diagrams/participantregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"methods":[{"visibility":"+","returnType":"void","name":"getAllParticipantRegistries","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The ParticipantRegistry is used to manage a set of participants stored on the blockchain.\n<p><a href=\"./diagrams/participantregistry.svg\"><img src=\"./diagrams/participantregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The ParticipantRegistry is used to manage a set of participants stored on the blockchain. <p><a href=\"./diagrams/participantregistry.svg\"><img src=\"./diagrams/participantregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getParticipantRegistry","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The ParticipantRegistry is used to manage a set of participants stored on the blockchain.\n<p><a href=\"./diagrams/participantregistry.svg\"><img src=\"./diagrams/participantregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The ParticipantRegistry is used to manage a set of participants stored on the blockchain. <p><a href=\"./diagrams/participantregistry.svg\"><img src=\"./diagrams/participantregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"participantRegistryExists","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The ParticipantRegistry is used to manage a set of participants stored on the blockchain.\n<p><a href=\"./diagrams/participantregistry.svg\"><img src=\"./diagrams/participantregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The ParticipantRegistry is used to manage a set of participants stored on the blockchain. <p><a href=\"./diagrams/participantregistry.svg\"><img src=\"./diagrams/participantregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"addParticipantRegistry","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The ParticipantRegistry is used to manage a set of participants stored on the blockchain.\n<p><a href=\"./diagrams/participantregistry.svg\"><img src=\"./diagrams/participantregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The ParticipantRegistry is used to manage a set of participants stored on the blockchain. <p><a href=\"./diagrams/participantregistry.svg\"><img src=\"./diagrams/participantregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The ParticipantRegistry is used to manage a set of participants stored on the blockchain.\n<p><a href=\"./diagrams/participantregistry.svg\"><img src=\"./diagrams/participantregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The ParticipantRegistry is used to manage a set of participants stored on the blockchain. <p><a href=\"./diagrams/participantregistry.svg\"><img src=\"./diagrams/participantregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]}],"superClass":"Registry","description":["The ParticipantRegistry is used to manage a set of participants stored on the blockchain. <p><a href=\"./diagrams/participantregistry.svg\"><img src=\"./diagrams/participantregistry.svg\" style=\"height:100%;\"/></a></p>"],"seeAlso":["See [Registry](registry)"],"visibility":"public","extends":"Registry","module":"client"},{"name":"Query","commentData":{"description":"The Query class represents a built query. A built query has been parsed and validated.\nDo not attempt to create an instance of this class.\nYou must use the {@link module:composer-client#BusinessNetworkConnection.buildQuery buildQuery}\nmethod instead.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["link","class","memberof"],"throws":"","example":"","commentData":{"description":"The Query class represents a built query. A built query has been parsed and validated.\nDo not attempt to create an instance of this class.\nYou must use the {@link module:composer-client#BusinessNetworkConnection.buildQuery buildQuery}\nmethod instead.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The Query class represents a built query. A built query has been parsed and validated. Do not attempt to create an instance of this class. You must use the {@link module:composer-client#BusinessNetworkConnection.buildQuery buildQuery} method instead."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getIdentifier","methodArgs":[],"decorators":["link","class","memberof"],"throws":"","example":"","commentData":{"description":"The Query class represents a built query. A built query has been parsed and validated.\nDo not attempt to create an instance of this class.\nYou must use the {@link module:composer-client#BusinessNetworkConnection.buildQuery buildQuery}\nmethod instead.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The Query class represents a built query. A built query has been parsed and validated. Do not attempt to create an instance of this class. You must use the {@link module:composer-client#BusinessNetworkConnection.buildQuery buildQuery} method instead."],"parameters":[],"suboptions":[]}],"description":["The Query class represents a built query. A built query has been parsed and validated. Do not attempt to create an instance of this class. You must use the {@link module:composer-client#BusinessNetworkConnection.buildQuery buildQuery} method instead."],"seeAlso":[],"visibility":"public","module":"client"},{"name":"Registry","commentData":{"description":"Class representing an Abstract Registry.\n<p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"methods":[{"visibility":"+","returnType":"void","name":"getAllRegistries","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Class representing an Abstract Registry.\n<p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Class representing an Abstract Registry. <p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getRegistry","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Class representing an Abstract Registry.\n<p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Class representing an Abstract Registry. <p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"existsRegistry","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Class representing an Abstract Registry.\n<p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Class representing an Abstract Registry. <p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"addRegistry","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Class representing an Abstract Registry.\n<p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Class representing an Abstract Registry. <p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Class representing an Abstract Registry.\n<p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Class representing an Abstract Registry. <p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"addAll","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Class representing an Abstract Registry.\n<p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Class representing an Abstract Registry. <p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"add","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Class representing an Abstract Registry.\n<p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Class representing an Abstract Registry. <p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"updateAll","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Class representing an Abstract Registry.\n<p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Class representing an Abstract Registry. <p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"update","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Class representing an Abstract Registry.\n<p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Class representing an Abstract Registry. <p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"removeAll","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Class representing an Abstract Registry.\n<p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Class representing an Abstract Registry. <p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"remove","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Class representing an Abstract Registry.\n<p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Class representing an Abstract Registry. <p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getAll","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Class representing an Abstract Registry.\n<p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Class representing an Abstract Registry. <p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"get","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Class representing an Abstract Registry.\n<p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Class representing an Abstract Registry. <p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"exists","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Class representing an Abstract Registry.\n<p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Class representing an Abstract Registry. <p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"resolveAll","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Class representing an Abstract Registry.\n<p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Class representing an Abstract Registry. <p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"resolve","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Class representing an Abstract Registry.\n<p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["Class representing an Abstract Registry. <p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]}],"description":["Class representing an Abstract Registry. <p><a href=\"./diagrams/registry.svg\"><img src=\"./diagrams/registry.svg\" style=\"height:100%;\"/></a></p>"],"seeAlso":[],"visibility":"public","module":"client"},{"name":"TransactionRegistry","commentData":{"description":"The TransactionRegistry is used to store a set of transactions on the blockchain.\n<p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"methods":[{"visibility":"+","returnType":"void","name":"getAllTransactionRegistries","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The TransactionRegistry is used to store a set of transactions on the blockchain.\n<p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The TransactionRegistry is used to store a set of transactions on the blockchain. <p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getTransactionRegistry","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The TransactionRegistry is used to store a set of transactions on the blockchain.\n<p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The TransactionRegistry is used to store a set of transactions on the blockchain. <p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"addTransactionRegistry","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The TransactionRegistry is used to store a set of transactions on the blockchain.\n<p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The TransactionRegistry is used to store a set of transactions on the blockchain. <p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"transactionRegistryExists","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The TransactionRegistry is used to store a set of transactions on the blockchain.\n<p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The TransactionRegistry is used to store a set of transactions on the blockchain. <p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The TransactionRegistry is used to store a set of transactions on the blockchain.\n<p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The TransactionRegistry is used to store a set of transactions on the blockchain. <p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"add","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The TransactionRegistry is used to store a set of transactions on the blockchain.\n<p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The TransactionRegistry is used to store a set of transactions on the blockchain. <p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"addAll","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The TransactionRegistry is used to store a set of transactions on the blockchain.\n<p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The TransactionRegistry is used to store a set of transactions on the blockchain. <p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"update","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The TransactionRegistry is used to store a set of transactions on the blockchain.\n<p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The TransactionRegistry is used to store a set of transactions on the blockchain. <p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"updateAll","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The TransactionRegistry is used to store a set of transactions on the blockchain.\n<p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The TransactionRegistry is used to store a set of transactions on the blockchain. <p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"remove","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The TransactionRegistry is used to store a set of transactions on the blockchain.\n<p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The TransactionRegistry is used to store a set of transactions on the blockchain. <p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"removeAll","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"The TransactionRegistry is used to store a set of transactions on the blockchain.\n<p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Registry"},{"title":"see","description":"See [Registry]{@link module:composer-client.Registry}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-client"}]},"description":["The TransactionRegistry is used to store a set of transactions on the blockchain. <p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]}],"superClass":"Registry","description":["The TransactionRegistry is used to store a set of transactions on the blockchain. <p><a href=\"./diagrams/transactionregistry.svg\"><img src=\"./diagrams/transactionregistry.svg\" style=\"height:100%;\"/></a></p>"],"seeAlso":["See [Registry](registry)"],"visibility":"public","extends":"Registry","module":"client"}],"common":[{"name":"BaseException","commentData":{"description":"A base class for all Composer exceptions\n<p><a href=\"./diagrams/baseexception.svg\"><img src=\"./diagrams/baseexception.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Error"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["extends","class","memberof"],"throws":"","example":"","commentData":{"description":"A base class for all Composer exceptions\n<p><a href=\"./diagrams/baseexception.svg\"><img src=\"./diagrams/baseexception.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"Error"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["A base class for all Composer exceptions <p><a href=\"./diagrams/baseexception.svg\"><img src=\"./diagrams/baseexception.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]}],"superClass":"Error","description":["A base class for all Composer exceptions <p><a href=\"./diagrams/baseexception.svg\"><img src=\"./diagrams/baseexception.svg\" style=\"height:100%;\"/></a></p>"],"seeAlso":[],"visibility":"public","extends":"Error","module":"common"},{"name":"BaseFileException","commentData":{"description":"Exception throws when a composer file is semantically invalid","tags":[{"title":"extends","description":null,"type":null,"name":"BaseException"},{"title":"see","description":"See [BaseException]{@link module:composer-common.BaseException}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"Exception throws when a composer file is semantically invalid","tags":[{"title":"extends","description":null,"type":null,"name":"BaseException"},{"title":"see","description":"See [BaseException]{@link module:composer-common.BaseException}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Exception throws when a composer file is semantically invalid"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getFileLocation","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"Exception throws when a composer file is semantically invalid","tags":[{"title":"extends","description":null,"type":null,"name":"BaseException"},{"title":"see","description":"See [BaseException]{@link module:composer-common.BaseException}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Exception throws when a composer file is semantically invalid"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getShortMessage","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"Exception throws when a composer file is semantically invalid","tags":[{"title":"extends","description":null,"type":null,"name":"BaseException"},{"title":"see","description":"See [BaseException]{@link module:composer-common.BaseException}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Exception throws when a composer file is semantically invalid"],"parameters":[],"suboptions":[]}],"superClass":"BaseException","description":["Exception throws when a composer file is semantically invalid"],"seeAlso":["See [BaseException](baseexception)"],"visibility":"public","extends":"BaseException","module":"common"},{"name":"BusinessNetworkDefinition","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getIdentifier","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getMetadata","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getName","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getVersion","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getDescription","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"fromArchive","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"toArchive","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"_getPackageJson","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"_processDependencies","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"_processModelFiles","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"_processScriptFiles","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"_processPermissionsAcl","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"_processQueryFile","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"_processReadme","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"fromDirectory","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"processDirectory","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"processFile","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"walkSync","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"accept","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getIntrospector","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getFactory","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getSerializer","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getScriptManager","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getAclManager","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getModelManager","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getQueryManager","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"setReadme","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"setPackageJson","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nA BusinessNetworkDefinition defines a set of Participants that exchange Assets by\nsending Transactions. This class manages the metadata and domain-specific types for\nthe network as well as a set of executable scripts.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"parameters":[],"suboptions":[]}],"description":["<p> A BusinessNetworkDefinition defines a set of Participants that exchange Assets by sending Transactions. This class manages the metadata and domain-specific types for the network as well as a set of executable scripts. </p>"],"seeAlso":[],"visibility":"public","module":"common"},{"name":"BusinessNetworkMetadata","commentData":{"description":"<p>\nDefines the metadata for a BusinessNeworkDefinition. This includes:\n<ul>\n  <li>package.json</li>\n  <li>README.md (optional)</li>\n</ul>\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nDefines the metadata for a BusinessNeworkDefinition. This includes:\n<ul>\n  <li>package.json</li>\n  <li>README.md (optional)</li>\n</ul>\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Defines the metadata for a BusinessNeworkDefinition. This includes: <ul>   <li>package.json</li>   <li>README.md (optional)</li> </ul> </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"_validName","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nDefines the metadata for a BusinessNeworkDefinition. This includes:\n<ul>\n  <li>package.json</li>\n  <li>README.md (optional)</li>\n</ul>\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Defines the metadata for a BusinessNeworkDefinition. This includes: <ul>   <li>package.json</li>   <li>README.md (optional)</li> </ul> </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getREADME","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nDefines the metadata for a BusinessNeworkDefinition. This includes:\n<ul>\n  <li>package.json</li>\n  <li>README.md (optional)</li>\n</ul>\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Defines the metadata for a BusinessNeworkDefinition. This includes: <ul>   <li>package.json</li>   <li>README.md (optional)</li> </ul> </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getPackageJson","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nDefines the metadata for a BusinessNeworkDefinition. This includes:\n<ul>\n  <li>package.json</li>\n  <li>README.md (optional)</li>\n</ul>\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Defines the metadata for a BusinessNeworkDefinition. This includes: <ul>   <li>package.json</li>   <li>README.md (optional)</li> </ul> </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getName","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nDefines the metadata for a BusinessNeworkDefinition. This includes:\n<ul>\n  <li>package.json</li>\n  <li>README.md (optional)</li>\n</ul>\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Defines the metadata for a BusinessNeworkDefinition. This includes: <ul>   <li>package.json</li>   <li>README.md (optional)</li> </ul> </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getDescription","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nDefines the metadata for a BusinessNeworkDefinition. This includes:\n<ul>\n  <li>package.json</li>\n  <li>README.md (optional)</li>\n</ul>\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Defines the metadata for a BusinessNeworkDefinition. This includes: <ul>   <li>package.json</li>   <li>README.md (optional)</li> </ul> </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getVersion","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nDefines the metadata for a BusinessNeworkDefinition. This includes:\n<ul>\n  <li>package.json</li>\n  <li>README.md (optional)</li>\n</ul>\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Defines the metadata for a BusinessNeworkDefinition. This includes: <ul>   <li>package.json</li>   <li>README.md (optional)</li> </ul> </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getIdentifier","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nDefines the metadata for a BusinessNeworkDefinition. This includes:\n<ul>\n  <li>package.json</li>\n  <li>README.md (optional)</li>\n</ul>\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Defines the metadata for a BusinessNeworkDefinition. This includes: <ul>   <li>package.json</li>   <li>README.md (optional)</li> </ul> </p>"],"parameters":[],"suboptions":[]}],"description":["<p> Defines the metadata for a BusinessNeworkDefinition. This includes: <ul>   <li>package.json</li>   <li>README.md (optional)</li> </ul> </p>"],"seeAlso":[],"visibility":"public","module":"common"},{"name":"Concept","commentData":{"description":"<p>\nResource is an instance that has a type. The type of the resource\nspecifies a set of properites (which themselves have types).\n</p>\n<p>\nType information in Composer is used to validate the structure of\nResource instances and for serialization.\n</p>\n<p>\nResources are used in Composer to represent Assets, Participants, Transactions and\nother domain classes that can be serialized for long-term persistent storage.\n</p>","tags":[{"title":"extends","description":null,"type":null,"name":"Identifiable"},{"title":"see","description":"See [Resource]{@link module:composer-common.Resource}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nResource is an instance that has a type. The type of the resource\nspecifies a set of properites (which themselves have types).\n</p>\n<p>\nType information in Composer is used to validate the structure of\nResource instances and for serialization.\n</p>\n<p>\nResources are used in Composer to represent Assets, Participants, Transactions and\nother domain classes that can be serialized for long-term persistent storage.\n</p>","tags":[{"title":"extends","description":null,"type":null,"name":"Identifiable"},{"title":"see","description":"See [Resource]{@link module:composer-common.Resource}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Resource is an instance that has a type. The type of the resource specifies a set of properites (which themselves have types). </p> <p> Type information in Composer is used to validate the structure of Resource instances and for serialization. </p> <p> Resources are used in Composer to represent Assets, Participants, Transactions and other domain classes that can be serialized for long-term persistent storage. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"isConcept","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nResource is an instance that has a type. The type of the resource\nspecifies a set of properites (which themselves have types).\n</p>\n<p>\nType information in Composer is used to validate the structure of\nResource instances and for serialization.\n</p>\n<p>\nResources are used in Composer to represent Assets, Participants, Transactions and\nother domain classes that can be serialized for long-term persistent storage.\n</p>","tags":[{"title":"extends","description":null,"type":null,"name":"Identifiable"},{"title":"see","description":"See [Resource]{@link module:composer-common.Resource}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Resource is an instance that has a type. The type of the resource specifies a set of properites (which themselves have types). </p> <p> Type information in Composer is used to validate the structure of Resource instances and for serialization. </p> <p> Resources are used in Composer to represent Assets, Participants, Transactions and other domain classes that can be serialized for long-term persistent storage. </p>"],"parameters":[],"suboptions":[]}],"superClass":"Typed","description":["<p> Resource is an instance that has a type. The type of the resource specifies a set of properites (which themselves have types). </p> <p> Type information in Composer is used to validate the structure of Resource instances and for serialization. </p> <p> Resources are used in Composer to represent Assets, Participants, Transactions and other domain classes that can be serialized for long-term persistent storage. </p>"],"seeAlso":["See [Resource](resource)"],"visibility":"public","extends":"Identifiable","module":"common"},{"name":"Factory","commentData":{"description":"Use the Factory to create instances of Resource: transactions, participants\nand assets.\n<p><a href=\"./diagrams/factory.svg\"><img src=\"./diagrams/factory.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"Use the Factory to create instances of Resource: transactions, participants\nand assets.\n<p><a href=\"./diagrams/factory.svg\"><img src=\"./diagrams/factory.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Use the Factory to create instances of Resource: transactions, participants and assets. <p><a href=\"./diagrams/factory.svg\"><img src=\"./diagrams/factory.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"newResource","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"Use the Factory to create instances of Resource: transactions, participants\nand assets.\n<p><a href=\"./diagrams/factory.svg\"><img src=\"./diagrams/factory.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Use the Factory to create instances of Resource: transactions, participants and assets. <p><a href=\"./diagrams/factory.svg\"><img src=\"./diagrams/factory.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"newConcept","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"Use the Factory to create instances of Resource: transactions, participants\nand assets.\n<p><a href=\"./diagrams/factory.svg\"><img src=\"./diagrams/factory.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Use the Factory to create instances of Resource: transactions, participants and assets. <p><a href=\"./diagrams/factory.svg\"><img src=\"./diagrams/factory.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"newRelationship","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"Use the Factory to create instances of Resource: transactions, participants\nand assets.\n<p><a href=\"./diagrams/factory.svg\"><img src=\"./diagrams/factory.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Use the Factory to create instances of Resource: transactions, participants and assets. <p><a href=\"./diagrams/factory.svg\"><img src=\"./diagrams/factory.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"newTransaction","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"Use the Factory to create instances of Resource: transactions, participants\nand assets.\n<p><a href=\"./diagrams/factory.svg\"><img src=\"./diagrams/factory.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Use the Factory to create instances of Resource: transactions, participants and assets. <p><a href=\"./diagrams/factory.svg\"><img src=\"./diagrams/factory.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"newEvent","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"Use the Factory to create instances of Resource: transactions, participants\nand assets.\n<p><a href=\"./diagrams/factory.svg\"><img src=\"./diagrams/factory.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Use the Factory to create instances of Resource: transactions, participants and assets. <p><a href=\"./diagrams/factory.svg\"><img src=\"./diagrams/factory.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"initializeNewObject","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"Use the Factory to create instances of Resource: transactions, participants\nand assets.\n<p><a href=\"./diagrams/factory.svg\"><img src=\"./diagrams/factory.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Use the Factory to create instances of Resource: transactions, participants and assets. <p><a href=\"./diagrams/factory.svg\"><img src=\"./diagrams/factory.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"parseGenerateOptions","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"Use the Factory to create instances of Resource: transactions, participants\nand assets.\n<p><a href=\"./diagrams/factory.svg\"><img src=\"./diagrams/factory.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Use the Factory to create instances of Resource: transactions, participants and assets. <p><a href=\"./diagrams/factory.svg\"><img src=\"./diagrams/factory.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]}],"description":["Use the Factory to create instances of Resource: transactions, participants and assets. <p><a href=\"./diagrams/factory.svg\"><img src=\"./diagrams/factory.svg\" style=\"height:100%;\"/></a></p>"],"seeAlso":[],"visibility":"public","module":"common"},{"name":"Identifiable","commentData":{"description":"Identifiable is an entity with a namespace, type and an identifier.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Identifiable is an entity with a namespace, type and an identifier.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Identifiable is an entity with a namespace, type and an identifier.","This class is abstract."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getIdentifier","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Identifiable is an entity with a namespace, type and an identifier.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Identifiable is an entity with a namespace, type and an identifier.","This class is abstract."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"setIdentifier","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Identifiable is an entity with a namespace, type and an identifier.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Identifiable is an entity with a namespace, type and an identifier.","This class is abstract."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getFullyQualifiedIdentifier","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Identifiable is an entity with a namespace, type and an identifier.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Identifiable is an entity with a namespace, type and an identifier.","This class is abstract."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"toString","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Identifiable is an entity with a namespace, type and an identifier.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Identifiable is an entity with a namespace, type and an identifier.","This class is abstract."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"isRelationship","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Identifiable is an entity with a namespace, type and an identifier.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Identifiable is an entity with a namespace, type and an identifier.","This class is abstract."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"isResource","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Identifiable is an entity with a namespace, type and an identifier.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Identifiable is an entity with a namespace, type and an identifier.","This class is abstract."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"toURI","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Identifiable is an entity with a namespace, type and an identifier.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Identifiable is an entity with a namespace, type and an identifier.","This class is abstract."],"parameters":[],"suboptions":[]}],"superClass":"Typed","description":["Identifiable is an entity with a namespace, type and an identifier.","This class is abstract."],"seeAlso":[],"visibility":"public","module":"common"},{"name":"IllegalModelException","commentData":{"description":"Exception throws when a composer file is semantically invalid","tags":[{"title":"extends","description":null,"type":null,"name":"BaseFileException"},{"title":"see","description":"See [BaseFileException]{@link module:composer-common.BaseFileException}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"Exception throws when a composer file is semantically invalid","tags":[{"title":"extends","description":null,"type":null,"name":"BaseFileException"},{"title":"see","description":"See [BaseFileException]{@link module:composer-common.BaseFileException}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Exception throws when a composer file is semantically invalid"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getModelFile","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"Exception throws when a composer file is semantically invalid","tags":[{"title":"extends","description":null,"type":null,"name":"BaseFileException"},{"title":"see","description":"See [BaseFileException]{@link module:composer-common.BaseFileException}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Exception throws when a composer file is semantically invalid"],"parameters":[],"suboptions":[]}],"superClass":"BaseFileException","description":["Exception throws when a composer file is semantically invalid"],"seeAlso":["See [BaseFileException](basefileexception)"],"visibility":"public","extends":"BaseFileException","module":"common"},{"name":"Introspector","commentData":{"description":"<p>\nProvides access to the structure of transactions, assets and participants.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nProvides access to the structure of transactions, assets and participants.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Provides access to the structure of transactions, assets and participants. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"accept","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nProvides access to the structure of transactions, assets and participants.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Provides access to the structure of transactions, assets and participants. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getClassDeclarations","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nProvides access to the structure of transactions, assets and participants.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Provides access to the structure of transactions, assets and participants. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getClassDeclaration","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nProvides access to the structure of transactions, assets and participants.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Provides access to the structure of transactions, assets and participants. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getModelManager","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nProvides access to the structure of transactions, assets and participants.\n</p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Provides access to the structure of transactions, assets and participants. </p>"],"parameters":[],"suboptions":[]}],"description":["<p> Provides access to the structure of transactions, assets and participants. </p>"],"seeAlso":[],"visibility":"public","module":"common"},{"name":"InvalidQueryException","commentData":{"description":"Exception thrown for invalid queries","tags":[{"title":"extends","description":null,"type":null,"name":"BaseFileException"},{"title":"see","description":"See [BaseFileException]{@link module:composer-common.BaseFileException}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"Exception thrown for invalid queries","tags":[{"title":"extends","description":null,"type":null,"name":"BaseFileException"},{"title":"see","description":"See [BaseFileException]{@link module:composer-common.BaseFileException}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Exception thrown for invalid queries"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getQueryFile","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"Exception thrown for invalid queries","tags":[{"title":"extends","description":null,"type":null,"name":"BaseFileException"},{"title":"see","description":"See [BaseFileException]{@link module:composer-common.BaseFileException}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Exception thrown for invalid queries"],"parameters":[],"suboptions":[]}],"superClass":"BaseFileException","description":["Exception thrown for invalid queries"],"seeAlso":["See [BaseFileException](basefileexception)"],"visibility":"public","extends":"BaseFileException","module":"common"},{"name":"ParseException","commentData":{"description":"Exception throws when a Composer file is syntactically invalid","tags":[{"title":"extends","description":null,"type":null,"name":"BaseFileException"},{"title":"see","description":"See [BaseFileException]{@link module:composer-common.BaseFileException}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"Exception throws when a Composer file is syntactically invalid","tags":[{"title":"extends","description":null,"type":null,"name":"BaseFileException"},{"title":"see","description":"See [BaseFileException]{@link module:composer-common.BaseFileException}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Exception throws when a Composer file is syntactically invalid"],"parameters":[],"suboptions":[]}],"superClass":"BaseFileException","description":["Exception throws when a Composer file is syntactically invalid"],"seeAlso":["See [BaseFileException](basefileexception)"],"visibility":"public","extends":"BaseFileException","module":"common"},{"name":"Relationship","commentData":{"description":"A Relationship is a typed pointer to an instance. I.e the relationship\nwith namespace = 'org.acme', type = 'Vehicle' and id = 'ABC' creates\na pointer that points at an instance of org.acme.Vehicle with the id\nABC.","tags":[{"title":"extends","description":null,"type":null,"name":"Identifiable"},{"title":"see","description":"See [Identifiable]{@link module:composer-common.Identifiable}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"A Relationship is a typed pointer to an instance. I.e the relationship\nwith namespace = 'org.acme', type = 'Vehicle' and id = 'ABC' creates\na pointer that points at an instance of org.acme.Vehicle with the id\nABC.","tags":[{"title":"extends","description":null,"type":null,"name":"Identifiable"},{"title":"see","description":"See [Identifiable]{@link module:composer-common.Identifiable}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["A Relationship is a typed pointer to an instance. I.e the relationship with namespace = 'org.acme', type = 'Vehicle' and id = 'ABC' creates a pointer that points at an instance of org.acme.Vehicle with the id ABC."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"toString","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"A Relationship is a typed pointer to an instance. I.e the relationship\nwith namespace = 'org.acme', type = 'Vehicle' and id = 'ABC' creates\na pointer that points at an instance of org.acme.Vehicle with the id\nABC.","tags":[{"title":"extends","description":null,"type":null,"name":"Identifiable"},{"title":"see","description":"See [Identifiable]{@link module:composer-common.Identifiable}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["A Relationship is a typed pointer to an instance. I.e the relationship with namespace = 'org.acme', type = 'Vehicle' and id = 'ABC' creates a pointer that points at an instance of org.acme.Vehicle with the id ABC."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"isRelationship","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"A Relationship is a typed pointer to an instance. I.e the relationship\nwith namespace = 'org.acme', type = 'Vehicle' and id = 'ABC' creates\na pointer that points at an instance of org.acme.Vehicle with the id\nABC.","tags":[{"title":"extends","description":null,"type":null,"name":"Identifiable"},{"title":"see","description":"See [Identifiable]{@link module:composer-common.Identifiable}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["A Relationship is a typed pointer to an instance. I.e the relationship with namespace = 'org.acme', type = 'Vehicle' and id = 'ABC' creates a pointer that points at an instance of org.acme.Vehicle with the id ABC."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"fromURI","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"A Relationship is a typed pointer to an instance. I.e the relationship\nwith namespace = 'org.acme', type = 'Vehicle' and id = 'ABC' creates\na pointer that points at an instance of org.acme.Vehicle with the id\nABC.","tags":[{"title":"extends","description":null,"type":null,"name":"Identifiable"},{"title":"see","description":"See [Identifiable]{@link module:composer-common.Identifiable}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["A Relationship is a typed pointer to an instance. I.e the relationship with namespace = 'org.acme', type = 'Vehicle' and id = 'ABC' creates a pointer that points at an instance of org.acme.Vehicle with the id ABC."],"parameters":[],"suboptions":[]}],"superClass":"Identifiable","description":["A Relationship is a typed pointer to an instance. I.e the relationship with namespace = 'org.acme', type = 'Vehicle' and id = 'ABC' creates a pointer that points at an instance of org.acme.Vehicle with the id ABC."],"seeAlso":["See [Identifiable](identifiable)"],"visibility":"public","extends":"Identifiable","module":"common"},{"name":"Resource","commentData":{"description":"<p>\nResource is an instance that has a type. The type of the resource\nspecifies a set of properites (which themselves have types).\n</p>\n<p>\nType information in Composer is used to validate the structure of\nResource instances and for serialization.\n</p>\n<p>\nResources are used in Composer to represent Assets, Participants, Transactions and\nother domain classes that can be serialized for long-term persistent storage.\n</p>","tags":[{"title":"extends","description":null,"type":null,"name":"Identifiable"},{"title":"see","description":"See [Resource]{@link module:composer-common.Resource}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nResource is an instance that has a type. The type of the resource\nspecifies a set of properites (which themselves have types).\n</p>\n<p>\nType information in Composer is used to validate the structure of\nResource instances and for serialization.\n</p>\n<p>\nResources are used in Composer to represent Assets, Participants, Transactions and\nother domain classes that can be serialized for long-term persistent storage.\n</p>","tags":[{"title":"extends","description":null,"type":null,"name":"Identifiable"},{"title":"see","description":"See [Resource]{@link module:composer-common.Resource}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Resource is an instance that has a type. The type of the resource specifies a set of properites (which themselves have types). </p> <p> Type information in Composer is used to validate the structure of Resource instances and for serialization. </p> <p> Resources are used in Composer to represent Assets, Participants, Transactions and other domain classes that can be serialized for long-term persistent storage. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"toString","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nResource is an instance that has a type. The type of the resource\nspecifies a set of properites (which themselves have types).\n</p>\n<p>\nType information in Composer is used to validate the structure of\nResource instances and for serialization.\n</p>\n<p>\nResources are used in Composer to represent Assets, Participants, Transactions and\nother domain classes that can be serialized for long-term persistent storage.\n</p>","tags":[{"title":"extends","description":null,"type":null,"name":"Identifiable"},{"title":"see","description":"See [Resource]{@link module:composer-common.Resource}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Resource is an instance that has a type. The type of the resource specifies a set of properites (which themselves have types). </p> <p> Type information in Composer is used to validate the structure of Resource instances and for serialization. </p> <p> Resources are used in Composer to represent Assets, Participants, Transactions and other domain classes that can be serialized for long-term persistent storage. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"isResource","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nResource is an instance that has a type. The type of the resource\nspecifies a set of properites (which themselves have types).\n</p>\n<p>\nType information in Composer is used to validate the structure of\nResource instances and for serialization.\n</p>\n<p>\nResources are used in Composer to represent Assets, Participants, Transactions and\nother domain classes that can be serialized for long-term persistent storage.\n</p>","tags":[{"title":"extends","description":null,"type":null,"name":"Identifiable"},{"title":"see","description":"See [Resource]{@link module:composer-common.Resource}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Resource is an instance that has a type. The type of the resource specifies a set of properites (which themselves have types). </p> <p> Type information in Composer is used to validate the structure of Resource instances and for serialization. </p> <p> Resources are used in Composer to represent Assets, Participants, Transactions and other domain classes that can be serialized for long-term persistent storage. </p>"],"parameters":[],"suboptions":[]}],"superClass":"Identifiable","description":["<p> Resource is an instance that has a type. The type of the resource specifies a set of properites (which themselves have types). </p> <p> Type information in Composer is used to validate the structure of Resource instances and for serialization. </p> <p> Resources are used in Composer to represent Assets, Participants, Transactions and other domain classes that can be serialized for long-term persistent storage. </p>"],"seeAlso":["See [Resource](resource)"],"visibility":"public","extends":"Identifiable","module":"common"},{"name":"SecurityContext","commentData":{"description":"SecurityContext is used to authenticate and manage\nuser credentials to the underlying blockchain fabric.\n<p><a href=\"./diagrams/securitycontext.svg\"><img src=\"./diagrams/securitycontext.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"SecurityContext is used to authenticate and manage\nuser credentials to the underlying blockchain fabric.\n<p><a href=\"./diagrams/securitycontext.svg\"><img src=\"./diagrams/securitycontext.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["SecurityContext is used to authenticate and manage user credentials to the underlying blockchain fabric. <p><a href=\"./diagrams/securitycontext.svg\"><img src=\"./diagrams/securitycontext.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getConnection","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"SecurityContext is used to authenticate and manage\nuser credentials to the underlying blockchain fabric.\n<p><a href=\"./diagrams/securitycontext.svg\"><img src=\"./diagrams/securitycontext.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["SecurityContext is used to authenticate and manage user credentials to the underlying blockchain fabric. <p><a href=\"./diagrams/securitycontext.svg\"><img src=\"./diagrams/securitycontext.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getUser","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"SecurityContext is used to authenticate and manage\nuser credentials to the underlying blockchain fabric.\n<p><a href=\"./diagrams/securitycontext.svg\"><img src=\"./diagrams/securitycontext.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["SecurityContext is used to authenticate and manage user credentials to the underlying blockchain fabric. <p><a href=\"./diagrams/securitycontext.svg\"><img src=\"./diagrams/securitycontext.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]}],"description":["SecurityContext is used to authenticate and manage user credentials to the underlying blockchain fabric. <p><a href=\"./diagrams/securitycontext.svg\"><img src=\"./diagrams/securitycontext.svg\" style=\"height:100%;\"/></a></p>"],"seeAlso":[],"visibility":"public","module":"common"},{"name":"SecurityException","commentData":{"description":"Class representing a security exception\n<p><a href=\"./diagrams/securityexception.svg\"><img src=\"./diagrams/securityexception.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"BaseException"},{"title":"see","description":"See [BaseException]{@link module:composer-common.BaseException}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"Class representing a security exception\n<p><a href=\"./diagrams/securityexception.svg\"><img src=\"./diagrams/securityexception.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"extends","description":null,"type":null,"name":"BaseException"},{"title":"see","description":"See [BaseException]{@link module:composer-common.BaseException}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Class representing a security exception <p><a href=\"./diagrams/securityexception.svg\"><img src=\"./diagrams/securityexception.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]}],"superClass":"BaseException","description":["Class representing a security exception <p><a href=\"./diagrams/securityexception.svg\"><img src=\"./diagrams/securityexception.svg\" style=\"height:100%;\"/></a></p>"],"seeAlso":["See [BaseException](baseexception)"],"visibility":"public","extends":"BaseException","module":"common"},{"name":"Serializer","commentData":{"description":"Serialize Resources instances to/from various formats for long-term storage\n(e.g. on the blockchain).\n<p><a href=\"./diagrams/serializer.svg\"><img src=\"./diagrams/serializer.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"Serialize Resources instances to/from various formats for long-term storage\n(e.g. on the blockchain).\n<p><a href=\"./diagrams/serializer.svg\"><img src=\"./diagrams/serializer.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Serialize Resources instances to/from various formats for long-term storage (e.g. on the blockchain). <p><a href=\"./diagrams/serializer.svg\"><img src=\"./diagrams/serializer.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"toJSON","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"Serialize Resources instances to/from various formats for long-term storage\n(e.g. on the blockchain).\n<p><a href=\"./diagrams/serializer.svg\"><img src=\"./diagrams/serializer.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Serialize Resources instances to/from various formats for long-term storage (e.g. on the blockchain). <p><a href=\"./diagrams/serializer.svg\"><img src=\"./diagrams/serializer.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"fromJSON","methodArgs":[],"decorators":["class","memberof"],"throws":"","example":"","commentData":{"description":"Serialize Resources instances to/from various formats for long-term storage\n(e.g. on the blockchain).\n<p><a href=\"./diagrams/serializer.svg\"><img src=\"./diagrams/serializer.svg\" style=\"height:100%;\"/></a></p>","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Serialize Resources instances to/from various formats for long-term storage (e.g. on the blockchain). <p><a href=\"./diagrams/serializer.svg\"><img src=\"./diagrams/serializer.svg\" style=\"height:100%;\"/></a></p>"],"parameters":[],"suboptions":[]}],"description":["Serialize Resources instances to/from various formats for long-term storage (e.g. on the blockchain). <p><a href=\"./diagrams/serializer.svg\"><img src=\"./diagrams/serializer.svg\" style=\"height:100%;\"/></a></p>"],"seeAlso":[],"visibility":"public","module":"common"},{"name":"Typed","commentData":{"description":"Object is an instance with a namespace and a type.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Object is an instance with a namespace and a type.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Object is an instance with a namespace and a type.","This class is abstract."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"accept","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Object is an instance with a namespace and a type.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Object is an instance with a namespace and a type.","This class is abstract."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getModelManager","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Object is an instance with a namespace and a type.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Object is an instance with a namespace and a type.","This class is abstract."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getType","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Object is an instance with a namespace and a type.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Object is an instance with a namespace and a type.","This class is abstract."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getFullyQualifiedType","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Object is an instance with a namespace and a type.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Object is an instance with a namespace and a type.","This class is abstract."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getNamespace","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Object is an instance with a namespace and a type.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Object is an instance with a namespace and a type.","This class is abstract."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getClassDeclaration","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Object is an instance with a namespace and a type.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Object is an instance with a namespace and a type.","This class is abstract."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"setPropertyValue","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Object is an instance with a namespace and a type.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Object is an instance with a namespace and a type.","This class is abstract."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"addArrayValue","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Object is an instance with a namespace and a type.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Object is an instance with a namespace and a type.","This class is abstract."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"assignFieldDefaults","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Object is an instance with a namespace and a type.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Object is an instance with a namespace and a type.","This class is abstract."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"instanceOf","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Object is an instance with a namespace and a type.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Object is an instance with a namespace and a type.","This class is abstract."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"toJSON","methodArgs":[],"decorators":["abstract","class","memberof"],"throws":"","example":"","commentData":{"description":"Object is an instance with a namespace and a type.\n\nThis class is abstract.","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Object is an instance with a namespace and a type.","This class is abstract."],"parameters":[],"suboptions":[]}],"description":["Object is an instance with a namespace and a type.","This class is abstract."],"seeAlso":[],"visibility":"public","module":"common"},{"name":"TypeNotFoundException","commentData":{"description":"Error thrown when a Composer type does not exist.","tags":[{"title":"extends","description":null,"type":null,"name":"BaseException"},{"title":"see","description":"See [BaseException]{@link module:composer-common.BaseException}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"Error thrown when a Composer type does not exist.","tags":[{"title":"extends","description":null,"type":null,"name":"BaseException"},{"title":"see","description":"See [BaseException]{@link module:composer-common.BaseException}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Error thrown when a Composer type does not exist."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"getTypeName","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"Error thrown when a Composer type does not exist.","tags":[{"title":"extends","description":null,"type":null,"name":"BaseException"},{"title":"see","description":"See [BaseException]{@link module:composer-common.BaseException}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Error thrown when a Composer type does not exist."],"parameters":[],"suboptions":[]}],"superClass":"BaseException","description":["Error thrown when a Composer type does not exist."],"seeAlso":["See [BaseException](baseexception)"],"visibility":"public","extends":"BaseException","module":"common"},{"name":"ValidatedConcept","commentData":{"description":"<p>\nResource is an instance that has a type. The type of the resource\nspecifies a set of properites (which themselves have types).\n</p>\n<p>\nType information in Composer is used to validate the structure of\nResource instances and for serialization.\n</p>\n<p>\nResources are used in Composer to represent Assets, Participants, Transactions and\nother domain classes that can be serialized for long-term persistent storage.\n</p>","tags":[{"title":"extends","description":null,"type":null,"name":"Identifiable"},{"title":"see","description":"See [Resource]{@link module:composer-common.Resource}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nResource is an instance that has a type. The type of the resource\nspecifies a set of properites (which themselves have types).\n</p>\n<p>\nType information in Composer is used to validate the structure of\nResource instances and for serialization.\n</p>\n<p>\nResources are used in Composer to represent Assets, Participants, Transactions and\nother domain classes that can be serialized for long-term persistent storage.\n</p>","tags":[{"title":"extends","description":null,"type":null,"name":"Identifiable"},{"title":"see","description":"See [Resource]{@link module:composer-common.Resource}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Resource is an instance that has a type. The type of the resource specifies a set of properites (which themselves have types). </p> <p> Type information in Composer is used to validate the structure of Resource instances and for serialization. </p> <p> Resources are used in Composer to represent Assets, Participants, Transactions and other domain classes that can be serialized for long-term persistent storage. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"setPropertyValue","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nResource is an instance that has a type. The type of the resource\nspecifies a set of properites (which themselves have types).\n</p>\n<p>\nType information in Composer is used to validate the structure of\nResource instances and for serialization.\n</p>\n<p>\nResources are used in Composer to represent Assets, Participants, Transactions and\nother domain classes that can be serialized for long-term persistent storage.\n</p>","tags":[{"title":"extends","description":null,"type":null,"name":"Identifiable"},{"title":"see","description":"See [Resource]{@link module:composer-common.Resource}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Resource is an instance that has a type. The type of the resource specifies a set of properites (which themselves have types). </p> <p> Type information in Composer is used to validate the structure of Resource instances and for serialization. </p> <p> Resources are used in Composer to represent Assets, Participants, Transactions and other domain classes that can be serialized for long-term persistent storage. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"addArrayValue","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nResource is an instance that has a type. The type of the resource\nspecifies a set of properites (which themselves have types).\n</p>\n<p>\nType information in Composer is used to validate the structure of\nResource instances and for serialization.\n</p>\n<p>\nResources are used in Composer to represent Assets, Participants, Transactions and\nother domain classes that can be serialized for long-term persistent storage.\n</p>","tags":[{"title":"extends","description":null,"type":null,"name":"Identifiable"},{"title":"see","description":"See [Resource]{@link module:composer-common.Resource}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Resource is an instance that has a type. The type of the resource specifies a set of properites (which themselves have types). </p> <p> Type information in Composer is used to validate the structure of Resource instances and for serialization. </p> <p> Resources are used in Composer to represent Assets, Participants, Transactions and other domain classes that can be serialized for long-term persistent storage. </p>"],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"validate","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"<p>\nResource is an instance that has a type. The type of the resource\nspecifies a set of properites (which themselves have types).\n</p>\n<p>\nType information in Composer is used to validate the structure of\nResource instances and for serialization.\n</p>\n<p>\nResources are used in Composer to represent Assets, Participants, Transactions and\nother domain classes that can be serialized for long-term persistent storage.\n</p>","tags":[{"title":"extends","description":null,"type":null,"name":"Identifiable"},{"title":"see","description":"See [Resource]{@link module:composer-common.Resource}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["<p> Resource is an instance that has a type. The type of the resource specifies a set of properites (which themselves have types). </p> <p> Type information in Composer is used to validate the structure of Resource instances and for serialization. </p> <p> Resources are used in Composer to represent Assets, Participants, Transactions and other domain classes that can be serialized for long-term persistent storage. </p>"],"parameters":[],"suboptions":[]}],"superClass":"Concept","description":["<p> Resource is an instance that has a type. The type of the resource specifies a set of properites (which themselves have types). </p> <p> Type information in Composer is used to validate the structure of Resource instances and for serialization. </p> <p> Resources are used in Composer to represent Assets, Participants, Transactions and other domain classes that can be serialized for long-term persistent storage. </p>"],"seeAlso":["See [Resource](resource)"],"visibility":"public","extends":"Identifiable","module":"common"},{"name":"ValidatedResource","commentData":{"description":"ValidatedResource is a Resource that can validate that property\nchanges (or the whole instance) do not violate the structure of\nthe type information associated with the instance.","tags":[{"title":"extends","description":null,"type":null,"name":"Resource"},{"title":"see","description":"See [Resource]{@link module:composer-common.Resource}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"ValidatedResource is a Resource that can validate that property\nchanges (or the whole instance) do not violate the structure of\nthe type information associated with the instance.","tags":[{"title":"extends","description":null,"type":null,"name":"Resource"},{"title":"see","description":"See [Resource]{@link module:composer-common.Resource}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["ValidatedResource is a Resource that can validate that property changes (or the whole instance) do not violate the structure of the type information associated with the instance."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"setPropertyValue","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"ValidatedResource is a Resource that can validate that property\nchanges (or the whole instance) do not violate the structure of\nthe type information associated with the instance.","tags":[{"title":"extends","description":null,"type":null,"name":"Resource"},{"title":"see","description":"See [Resource]{@link module:composer-common.Resource}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["ValidatedResource is a Resource that can validate that property changes (or the whole instance) do not violate the structure of the type information associated with the instance."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"addArrayValue","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"ValidatedResource is a Resource that can validate that property\nchanges (or the whole instance) do not violate the structure of\nthe type information associated with the instance.","tags":[{"title":"extends","description":null,"type":null,"name":"Resource"},{"title":"see","description":"See [Resource]{@link module:composer-common.Resource}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["ValidatedResource is a Resource that can validate that property changes (or the whole instance) do not violate the structure of the type information associated with the instance."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"validate","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"ValidatedResource is a Resource that can validate that property\nchanges (or the whole instance) do not violate the structure of\nthe type information associated with the instance.","tags":[{"title":"extends","description":null,"type":null,"name":"Resource"},{"title":"see","description":"See [Resource]{@link module:composer-common.Resource}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["ValidatedResource is a Resource that can validate that property changes (or the whole instance) do not violate the structure of the type information associated with the instance."],"parameters":[],"suboptions":[]}],"superClass":"Resource","description":["ValidatedResource is a Resource that can validate that property changes (or the whole instance) do not violate the structure of the type information associated with the instance."],"seeAlso":["See [Resource](resource)"],"visibility":"public","extends":"Resource","module":"common"},{"name":"ValidationException","commentData":{"description":"Exception thrown when a resource fails to model against the model","tags":[{"title":"extends","description":null,"type":null,"name":"BaseException"},{"title":"see","description":"See [BaseException]{@link module:composer-common.BaseException}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["extends","see","link","class","memberof"],"throws":"","example":"","commentData":{"description":"Exception thrown when a resource fails to model against the model","tags":[{"title":"extends","description":null,"type":null,"name":"BaseException"},{"title":"see","description":"See [BaseException]{@link module:composer-common.BaseException}"},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"description":["Exception thrown when a resource fails to model against the model"],"parameters":[],"suboptions":[]}],"superClass":"BaseException","description":["Exception thrown when a resource fails to model against the model"],"seeAlso":["See [BaseException](baseexception)"],"visibility":"public","extends":"BaseException","module":"common"}],"runtime":[{"name":"AssetRegistry","commentData":{"description":"A class that represents an asset registry in the transaction processor API. The\ntransaction processor API should expose no internal properties or internal\nmethods which could be accessed or misused.\nDo not attempt to create an instance of this class.<br>\nYou must use the {@link module:composer-runtime#getAssetRegistry getAssetRegistry}\nmethod instead.","tags":[{"title":"class","description":null,"type":null,"name":"AssetRegistry"},{"title":"classdesc","description":"An asset registry manages a set of assets."},{"title":"memberof","description":"module:composer-runtime"},{"title":"public","description":null}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["link","class","classdesc","memberof","public"],"throws":"","example":"","commentData":{"description":"A class that represents an asset registry in the transaction processor API. The\ntransaction processor API should expose no internal properties or internal\nmethods which could be accessed or misused.\nDo not attempt to create an instance of this class.<br>\nYou must use the {@link module:composer-runtime#getAssetRegistry getAssetRegistry}\nmethod instead.","tags":[{"title":"class","description":null,"type":null,"name":"AssetRegistry"},{"title":"classdesc","description":"An asset registry manages a set of assets."},{"title":"memberof","description":"module:composer-runtime"},{"title":"public","description":null}]},"description":["A class that represents an asset registry in the transaction processor API. The transaction processor API should expose no internal properties or internal methods which could be accessed or misused. Do not attempt to create an instance of this class.<br> You must use the {@link module:composer-runtime#getAssetRegistry getAssetRegistry} method instead."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"Promise","name":"getAll","parameterTypes":[],"parameterNames":[],"throws":"","decorators":["example","public","method","return","link"],"functionText":"function getAll() {\n            return registry.getAll();\n        }","example":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get all of the vehicles in the vehicle asset registry.\n    return assetRegistry.getAll();\n  })\n  .then(function (vehicles) {\n    // Process the array of vehicle objects.\n    vehicles.forEach(function (vehicle) {\n      console.log(vehicle.vehicleId);\n    });\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Get a list of all of the existing assets in this asset registry.","tags":[{"title":"example","description":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get all of the vehicles in the vehicle asset registry.\n    return assetRegistry.getAll();\n  })\n  .then(function (vehicles) {\n    // Process the array of vehicle objects.\n    vehicles.forEach(function (vehicle) {\n      console.log(vehicle.vehicleId);\n    });\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.AssetRegistry#getAll"},{"title":"return","description":"A promise. The promise is resolved with an array of\n{@link Resource} instances representing all of the assets stored in this\nasset registry. If the asset registry does not exist, or the current\nuser does not have access to the asset registry, then the promise will\nbe rejected with an error that describes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Get a list of all of the existing assets in this asset registry."],"parameters":[],"suboptions":[],"return":{"description":["A promise. The promise is resolved with an array of {@link Resource} instances representing all of the assets stored in this asset registry. If the asset registry does not exist, or the current user does not have access to the asset registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"get","parameterTypes":["string"],"parameterNames":["id"],"throws":"","decorators":["example","public","method","param","return","link"],"functionText":"function get(id) {\n            return registry.get(id);\n        }","example":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the specific vehicle from the vehicle asset registry.\n    return assetRegistry.get('VEHICLE_1');\n  })\n  .then(function (vehicle) {\n    // Process the the vehicle object.\n    console.log(vehicle.vehicleId);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Get the specified asset in this asset registry using the unique identifier\nof the asset.","tags":[{"title":"example","description":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the specific vehicle from the vehicle asset registry.\n    return assetRegistry.get('VEHICLE_1');\n  })\n  .then(function (vehicle) {\n    // Process the the vehicle object.\n    console.log(vehicle.vehicleId);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.AssetRegistry#get"},{"title":"param","description":"The ID of the asset.","type":{"type":"NameExpression","name":"string"},"name":"id"},{"title":"return","description":"A promise. The promise is resolved with a {@link Resource}\ninstance representing the specified asset in this asset registry. If the\nspecified asset does not exist, or the current user does not have access\nto the specified asset, then the promise will be rejected with an error\nthat describes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Get the specified asset in this asset registry using the unique identifier of the asset."],"parameters":[{"description":"The ID of the asset.","type":"string","name":"id","optional":false}],"suboptions":[],"return":{"description":["A promise. The promise is resolved with a {@link Resource} instance representing the specified asset in this asset registry. If the specified asset does not exist, or the current user does not have access to the specified asset, then the promise will be rejected with an error that describes the problem."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"exists","parameterTypes":["string"],"parameterNames":["id"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function exists(id) {\n            return registry.exists(id);\n        }","example":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Determine if the specific vehicle exists in the vehicle asset registry.\n    return assetRegistry.exists('VEHICLE_1');\n  })\n  .then(function (exists) {\n    // Process the the boolean result.\n    console.log('Vehicle exists', exists);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Determines whether a specific asset exists in this asset registry.","tags":[{"title":"example","description":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Determine if the specific vehicle exists in the vehicle asset registry.\n    return assetRegistry.exists('VEHICLE_1');\n  })\n  .then(function (exists) {\n    // Process the the boolean result.\n    console.log('Vehicle exists', exists);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.AssetRegistry#exists"},{"title":"param","description":"The ID of the asset.","type":{"type":"NameExpression","name":"string"},"name":"id"},{"title":"return","description":"A promise. The promise is resolved with a boolean which\nis true if the specified asset exists in this asset registry, and false\nif the specified participant does not exist.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Determines whether a specific asset exists in this asset registry."],"parameters":[{"description":"The ID of the asset.","type":"string","name":"id","optional":false}],"suboptions":[],"return":{"description":["A promise. The promise is resolved with a boolean which is true if the specified asset exists in this asset registry, and false if the specified participant does not exist."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"addAll","parameterTypes":["Resource[]"],"parameterNames":["assets"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function addAll(assets) {\n            return registry.addAll(assets, { convertResourcesToRelationships: true });\n        }","example":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Create the first vehicle.\n    var vehicle1 = factory.newResource('org.acme', 'Vehicle', 'VEHICLE_1');\n    vehicle1.colour = 'BLUE';\n    // Create the second vehicle.\n    var vehicle2 = factory.newResource('org.acme', 'Vehicle', 'VEHICLE_2');\n    vehicle2.colour = 'GREEN';\n    // Add the vehicles to the vehicle asset registry.\n    return vehicleAssetRegistry.addAll([vehicle1, vehicle2]);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Add all of the specified assets to this asset registry.","tags":[{"title":"example","description":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Create the first vehicle.\n    var vehicle1 = factory.newResource('org.acme', 'Vehicle', 'VEHICLE_1');\n    vehicle1.colour = 'BLUE';\n    // Create the second vehicle.\n    var vehicle2 = factory.newResource('org.acme', 'Vehicle', 'VEHICLE_2');\n    vehicle2.colour = 'GREEN';\n    // Add the vehicles to the vehicle asset registry.\n    return vehicleAssetRegistry.addAll([vehicle1, vehicle2]);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.AssetRegistry#addAll"},{"title":"param","description":"The assets to add to this asset registry.","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Resource"}]},"name":"assets"},{"title":"return","description":"A promise. The promise is resolved when all of the\nassets have been added to this asset registry. If the assets cannot be\nadded to this asset registry, or if the assets already exist in the\nasset registry, then the promise will be rejected with an error\nthat describes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Add all of the specified assets to this asset registry."],"parameters":[{"description":"The assets to add to this asset registry.","name":"assets","optional":false}],"suboptions":[],"return":{"description":["A promise. The promise is resolved when all of the assets have been added to this asset registry. If the assets cannot be added to this asset registry, or if the assets already exist in the asset registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"add","parameterTypes":["Resource"],"parameterNames":["asset"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function add(asset) {\n            return registry.add(asset, { convertResourcesToRelationships: true });\n        }","example":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Create the vehicle.\n    var vehicle = factory.newResource('org.acme', 'Vehicle', 'VEHICLE_1');\n    vehicle.colour = 'BLUE';\n    // Add the vehicle to the vehicle asset registry.\n    return vehicleAssetRegistry.add(vehicle);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Add the specified asset to this asset registry.","tags":[{"title":"example","description":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Create the vehicle.\n    var vehicle = factory.newResource('org.acme', 'Vehicle', 'VEHICLE_1');\n    vehicle.colour = 'BLUE';\n    // Add the vehicle to the vehicle asset registry.\n    return vehicleAssetRegistry.add(vehicle);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.AssetRegistry#add"},{"title":"param","description":"The assets to add to this asset registry.","type":{"type":"NameExpression","name":"Resource"},"name":"asset"},{"title":"return","description":"A promise. The promise is resolved when the asset has\nbeen added to this asset registry. If the asset cannot be added to this\nasset registry, or if the asset already exists in the asset registry,\nthen the promise will be rejected with an error that describes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Add the specified asset to this asset registry."],"parameters":[{"description":"The assets to add to this asset registry.","type":"Resource","name":"asset","optional":false}],"suboptions":[],"return":{"description":["A promise. The promise is resolved when the asset has been added to this asset registry. If the asset cannot be added to this asset registry, or if the asset already exists in the asset registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"updateAll","parameterTypes":["Resource[]"],"parameterNames":["assets"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function updateAll(assets) {\n            return registry.updateAll(assets, { convertResourcesToRelationships: true });\n        }","example":"// The existing vehicles that have come from elsewhere.\nvar vehicle1;\nvar vehicle2;\n// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Modify the properties of the first vehicle.\n    vehicle1.colour = 'PURPLE';\n    // Modify the properties of the second vehicle.\n    vehicle2.colour = 'ORANGE';\n    // Update the vehicles in the vehicle asset registry.\n    return vehicleAssetRegistry.updateAll([vehicle1, vehicle2]);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Update all of the specified assets in this asset registry.","tags":[{"title":"example","description":"// The existing vehicles that have come from elsewhere.\nvar vehicle1;\nvar vehicle2;\n// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Modify the properties of the first vehicle.\n    vehicle1.colour = 'PURPLE';\n    // Modify the properties of the second vehicle.\n    vehicle2.colour = 'ORANGE';\n    // Update the vehicles in the vehicle asset registry.\n    return vehicleAssetRegistry.updateAll([vehicle1, vehicle2]);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.AssetRegistry#updateAll"},{"title":"param","description":"The assets to update in this asset registry.","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Resource"}]},"name":"assets"},{"title":"return","description":"A promise. The promise is resolved when all of the\nassets have been updated in this asset registry. If the assets cannot be\nupdated in this asset registry, or if the assets do not exist in the\nasset registry, then the promise will be rejected with an error that\ndescribes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Update all of the specified assets in this asset registry."],"parameters":[{"description":"The assets to update in this asset registry.","name":"assets","optional":false}],"suboptions":[],"return":{"description":["A promise. The promise is resolved when all of the assets have been updated in this asset registry. If the assets cannot be updated in this asset registry, or if the assets do not exist in the asset registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"update","parameterTypes":["Resource"],"parameterNames":["asset"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function update(asset) {\n            return registry.update(asset, { convertResourcesToRelationships: true });\n        }","example":"// The existing vehicle that has come from elsewhere.\nvar vehicle;\n// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Modify the properties of the vehicle.\n    vehicle.colour = 'PURPLE';\n    // Update the vehicle in the vehicle asset registry.\n    return vehicleAssetRegistry.update(vehicle);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Update the specified asset in this asset registry.","tags":[{"title":"example","description":"// The existing vehicle that has come from elsewhere.\nvar vehicle;\n// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Modify the properties of the vehicle.\n    vehicle.colour = 'PURPLE';\n    // Update the vehicle in the vehicle asset registry.\n    return vehicleAssetRegistry.update(vehicle);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.AssetRegistry#update"},{"title":"param","description":"The asset to update in this asset registry.","type":{"type":"NameExpression","name":"Resource"},"name":"asset"},{"title":"return","description":"A promise. The promise is resolved when the asset\nhave been updated in this asset registry. If the asset cannot be\nupdated in this asset registry, or if the asset does not exist in the\nasset registry, then the promise will be rejected with an error that\ndescribes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Update the specified asset in this asset registry."],"parameters":[{"description":"The asset to update in this asset registry.","type":"Resource","name":"asset","optional":false}],"suboptions":[],"return":{"description":["A promise. The promise is resolved when the asset have been updated in this asset registry. If the asset cannot be updated in this asset registry, or if the asset does not exist in the asset registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"removeAll","parameterTypes":[],"parameterNames":["assets"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function removeAll(assets) {\n            return registry.removeAll(assets);\n        }","example":"// The existing vehicles that have come from elsewhere.\nvar vehicle1;\n// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Remove the vehicles from the vehicle asset registry. Note that\n    // one vehicle is specified as a vehicle instance, and the other\n    // vehicle is specified by the ID of the vehicle.\n    return vehicleAssetRegistry.removeAll([vehicle1, 'VEHICLE_2']);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Remove all of the specified assets from this asset registry.","tags":[{"title":"example","description":"// The existing vehicles that have come from elsewhere.\nvar vehicle1;\n// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Remove the vehicles from the vehicle asset registry. Note that\n    // one vehicle is specified as a vehicle instance, and the other\n    // vehicle is specified by the ID of the vehicle.\n    return vehicleAssetRegistry.removeAll([vehicle1, 'VEHICLE_2']);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.AssetRegistry#removeAll"},{"title":"param","description":"The assets, or the IDs of the assets,\nto remove from this asset registry.","type":{"type":"UnionType","elements":[{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"string"}]},{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Resource"}]}]},"name":"assets"},{"title":"return","description":"A promise. The promise is resolved when all of the\nassets have been removed from this asset registry. If the assets cannot be\nremoved from this asset registry, or if the assets do not exist in the\nasset registry, then the promise will be rejected with an error that\ndescribes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Remove all of the specified assets from this asset registry."],"parameters":[{"description":"The assets, or the IDs of the assets, to remove from this asset registry.","name":"assets","type":"; ","optional":false}],"suboptions":[],"return":{"description":["A promise. The promise is resolved when all of the assets have been removed from this asset registry. If the assets cannot be removed from this asset registry, or if the assets do not exist in the asset registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"remove","parameterTypes":[],"parameterNames":["asset"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function remove(asset) {\n            return registry.remove(asset);\n        }","example":"// The existing vehicle that has come from elsewhere.\nvar vehicle;\n// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Remove the vehicle from the vehicle asset registry.\n    return vehicleAssetRegistry.remove(vehicle);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Remove the specified asset from this asset registry.","tags":[{"title":"example","description":"// The existing vehicle that has come from elsewhere.\nvar vehicle;\n// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Remove the vehicle from the vehicle asset registry.\n    return vehicleAssetRegistry.remove(vehicle);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.AssetRegistry#remove"},{"title":"param","description":"The asset, or ID of the asset, to remove\nfrom this asset registry.","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"string"},{"type":"NameExpression","name":"Resource"}]},"name":"asset"},{"title":"return","description":"A promise. The promise is resolved when the asset\nhas been removed from this asset registry. If the asset cannot be\nremoved from this asset registry, or if the asset does not exist in the\nasset registry, then the promise will be rejected with an error that\ndescribes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Remove the specified asset from this asset registry."],"parameters":[{"description":"The asset, or ID of the asset, to remove from this asset registry.","name":"asset","type":"string; Resource","optional":false}],"suboptions":[],"return":{"description":["A promise. The promise is resolved when the asset has been removed from this asset registry. If the asset cannot be removed from this asset registry, or if the asset does not exist in the asset registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"}}],"description":["A class that represents an asset registry in the transaction processor API. The transaction processor API should expose no internal properties or internal methods which could be accessed or misused. Do not attempt to create an instance of this class.<br> You must use the {@link module:composer-runtime#getAssetRegistry getAssetRegistry} method instead."],"seeAlso":[],"visibility":"public","module":"runtime"},{"name":"ParticipantRegistry","commentData":{"description":"Do not attempt to create an instance of this class.<br>\nYou must use the {@link module:composer-runtime#getParticipantRegistry getParticipantRegistry}\nmethod instead.","tags":[{"title":"class","description":null,"type":null,"name":"ParticipantRegistry"},{"title":"classdesc","description":"An participant registry manages a set of participants."},{"title":"memberof","description":"module:composer-runtime"},{"title":"public","description":null}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["link","class","classdesc","memberof","public"],"throws":"","example":"","commentData":{"description":"Do not attempt to create an instance of this class.<br>\nYou must use the {@link module:composer-runtime#getParticipantRegistry getParticipantRegistry}\nmethod instead.","tags":[{"title":"class","description":null,"type":null,"name":"ParticipantRegistry"},{"title":"classdesc","description":"An participant registry manages a set of participants."},{"title":"memberof","description":"module:composer-runtime"},{"title":"public","description":null}]},"description":["Do not attempt to create an instance of this class.<br> You must use the {@link module:composer-runtime#getParticipantRegistry getParticipantRegistry} method instead."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"Promise","name":"getAll","parameterTypes":[],"parameterNames":[],"throws":"","decorators":["example","public","method","return","link"],"functionText":"function getAll() {\n            return registry.getAll();\n        }","example":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get all of the drivers in the driver participant registry.\n    return participantRegistry.getAll();\n  })\n  .then(function (drivers) {\n    // Process the array of driver objects.\n    drivers.forEach(function (driver) {\n      console.log(driver.driverId);\n    });\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Get a list of all of the existing participants in this participant registry.","tags":[{"title":"example","description":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get all of the drivers in the driver participant registry.\n    return participantRegistry.getAll();\n  })\n  .then(function (drivers) {\n    // Process the array of driver objects.\n    drivers.forEach(function (driver) {\n      console.log(driver.driverId);\n    });\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.ParticipantRegistry#getAll"},{"title":"return","description":"A promise. The promise is resolved with an array of\n{@link Resource} instances representing all of the participants stored in this\nparticipant registry. If the participant registry does not exist, or the current\nuser does not have access to the participant registry, then the promise will\nbe rejected with an error that describes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Get a list of all of the existing participants in this participant registry."],"parameters":[],"suboptions":[],"return":{"description":["A promise. The promise is resolved with an array of {@link Resource} instances representing all of the participants stored in this participant registry. If the participant registry does not exist, or the current user does not have access to the participant registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"get","parameterTypes":["string"],"parameterNames":["id"],"throws":"","decorators":["example","public","method","param","return","link"],"functionText":"function get(id) {\n            return registry.get(id);\n        }","example":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the specific driver from the driver participant registry.\n    return participantRegistry.get('VEHICLE_1');\n  })\n  .then(function (driver) {\n    // Process the the driver object.\n    console.log(driver.driverId);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Get the specified participant in this participant registry using the unique identifier\nof the participant.","tags":[{"title":"example","description":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the specific driver from the driver participant registry.\n    return participantRegistry.get('VEHICLE_1');\n  })\n  .then(function (driver) {\n    // Process the the driver object.\n    console.log(driver.driverId);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.ParticipantRegistry#get"},{"title":"param","description":"The ID of the participant.","type":{"type":"NameExpression","name":"string"},"name":"id"},{"title":"return","description":"A promise. The promise is resolved with a {@link Resource}\ninstance representing the specified participant in this participant registry. If the\nspecified participant does not exist, or the current user does not have access\nto the specified participant, then the promise will be rejected with an error\nthat describes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Get the specified participant in this participant registry using the unique identifier of the participant."],"parameters":[{"description":"The ID of the participant.","type":"string","name":"id","optional":false}],"suboptions":[],"return":{"description":["A promise. The promise is resolved with a {@link Resource} instance representing the specified participant in this participant registry. If the specified participant does not exist, or the current user does not have access to the specified participant, then the promise will be rejected with an error that describes the problem."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"exists","parameterTypes":["string"],"parameterNames":["id"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function exists(id) {\n            return registry.exists(id);\n        }","example":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Determine if the specific driver exists in the driver participant registry.\n    return participantRegistry.exists('VEHICLE_1');\n  })\n  .then(function (exists) {\n    // Process the the boolean result.\n    console.log('Driver exists', exists);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Determines whether a specific participant exists in this participant registry.","tags":[{"title":"example","description":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Determine if the specific driver exists in the driver participant registry.\n    return participantRegistry.exists('VEHICLE_1');\n  })\n  .then(function (exists) {\n    // Process the the boolean result.\n    console.log('Driver exists', exists);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.ParticipantRegistry#exists"},{"title":"param","description":"The ID of the participant.","type":{"type":"NameExpression","name":"string"},"name":"id"},{"title":"return","description":"A promise. The promise is resolved with a boolean which\nis true if the specified participant exists in this participant registry,\nand false if the specified participant does not exist.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Determines whether a specific participant exists in this participant registry."],"parameters":[{"description":"The ID of the participant.","type":"string","name":"id","optional":false}],"suboptions":[],"return":{"description":["A promise. The promise is resolved with a boolean which is true if the specified participant exists in this participant registry, and false if the specified participant does not exist."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"addAll","parameterTypes":["Resource[]"],"parameterNames":["participants"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function addAll(participants) {\n            return registry.addAll(participants, { convertResourcesToRelationships: true });\n        }","example":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Create the first driver.\n    var driver1 = factory.newResource('org.acme', 'Driver', 'VEHICLE_1');\n    driver1.location = 'Southampton';\n    // Create the second driver.\n    var driver2 = factory.newResource('org.acme', 'Driver', 'VEHICLE_2');\n    driver2.location = 'GREEN';\n    // Add the drivers to the driver participant registry.\n    return participantRegistry.addAll([driver1, driver2]);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Add all of the specified participants to this participant registry.","tags":[{"title":"example","description":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Create the first driver.\n    var driver1 = factory.newResource('org.acme', 'Driver', 'VEHICLE_1');\n    driver1.location = 'Southampton';\n    // Create the second driver.\n    var driver2 = factory.newResource('org.acme', 'Driver', 'VEHICLE_2');\n    driver2.location = 'GREEN';\n    // Add the drivers to the driver participant registry.\n    return participantRegistry.addAll([driver1, driver2]);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.ParticipantRegistry#addAll"},{"title":"param","description":"The participants to add to this participant registry.","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Resource"}]},"name":"participants"},{"title":"return","description":"A promise. The promise is resolved when all of the\nparticipants have been added to this participant registry. If the participants cannot be\nadded to this participant registry, or if the participants already exist in the\nparticipant registry, then the promise will be rejected with an error\nthat describes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Add all of the specified participants to this participant registry."],"parameters":[{"description":"The participants to add to this participant registry.","name":"participants","optional":false}],"suboptions":[],"return":{"description":["A promise. The promise is resolved when all of the participants have been added to this participant registry. If the participants cannot be added to this participant registry, or if the participants already exist in the participant registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"add","parameterTypes":["Resource"],"parameterNames":["participant"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function add(participant) {\n            return registry.add(participant, { convertResourcesToRelationships: true });\n        }","example":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Create the driver.\n    var driver = factory.newResource('org.acme', 'Driver', 'VEHICLE_1');\n    driver.location = 'Southampton';\n    // Add the driver to the driver participant registry.\n    return participantRegistry.add(driver);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Add the specified participant to this participant registry.","tags":[{"title":"example","description":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Create the driver.\n    var driver = factory.newResource('org.acme', 'Driver', 'VEHICLE_1');\n    driver.location = 'Southampton';\n    // Add the driver to the driver participant registry.\n    return participantRegistry.add(driver);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.ParticipantRegistry#add"},{"title":"param","description":"The participants to add to this participant registry.","type":{"type":"NameExpression","name":"Resource"},"name":"participant"},{"title":"return","description":"A promise. The promise is resolved when the participant has\nbeen added to this participant registry. If the participant cannot be added to this\nparticipant registry, or if the participant already exists in the participant registry,\nthen the promise will be rejected with an error that describes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Add the specified participant to this participant registry."],"parameters":[{"description":"The participants to add to this participant registry.","type":"Resource","name":"participant","optional":false}],"suboptions":[],"return":{"description":["A promise. The promise is resolved when the participant has been added to this participant registry. If the participant cannot be added to this participant registry, or if the participant already exists in the participant registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"updateAll","parameterTypes":["Resource[]"],"parameterNames":["participants"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function updateAll(participants) {\n            return registry.updateAll(participants, { convertResourcesToRelationships: true });\n        }","example":"// The existing drivers that have come from elsewhere.\nvar driver1;\nvar driver2;\n// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Modify the properties of the first driver.\n    driver1.location = 'Hursley';\n    // Modify the properties of the second driver.\n    driver2.location = 'London';\n    // Update the drivers in the driver participant registry.\n    return participantRegistry.updateAll([driver1, driver2]);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Update all of the specified participants in this participant registry.","tags":[{"title":"example","description":"// The existing drivers that have come from elsewhere.\nvar driver1;\nvar driver2;\n// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Modify the properties of the first driver.\n    driver1.location = 'Hursley';\n    // Modify the properties of the second driver.\n    driver2.location = 'London';\n    // Update the drivers in the driver participant registry.\n    return participantRegistry.updateAll([driver1, driver2]);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.ParticipantRegistry#updateAll"},{"title":"param","description":"The participants to update in this participant registry.","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Resource"}]},"name":"participants"},{"title":"return","description":"A promise. The promise is resolved when all of the\nparticipants have been updated in this participant registry. If the participants cannot be\nupdated in this participant registry, or if the participants do not exist in the\nparticipant registry, then the promise will be rejected with an error that\ndescribes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Update all of the specified participants in this participant registry."],"parameters":[{"description":"The participants to update in this participant registry.","name":"participants","optional":false}],"suboptions":[],"return":{"description":["A promise. The promise is resolved when all of the participants have been updated in this participant registry. If the participants cannot be updated in this participant registry, or if the participants do not exist in the participant registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"update","parameterTypes":["Resource"],"parameterNames":["participant"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function update(participant) {\n            return registry.update(participant, { convertResourcesToRelationships: true });\n        }","example":"// The existing driver that has come from elsewhere.\nvar driver;\n// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Modify the properties of the driver.\n    driver.location = 'Hursley';\n    // Update the driver in the driver participant registry.\n    return participantRegistry.update(driver);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Update the specified participant in this participant registry.","tags":[{"title":"example","description":"// The existing driver that has come from elsewhere.\nvar driver;\n// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Modify the properties of the driver.\n    driver.location = 'Hursley';\n    // Update the driver in the driver participant registry.\n    return participantRegistry.update(driver);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.ParticipantRegistry#update"},{"title":"param","description":"The participant to update in this participant registry.","type":{"type":"NameExpression","name":"Resource"},"name":"participant"},{"title":"return","description":"A promise. The promise is resolved when the participant\nhave been updated in this participant registry. If the participant cannot be\nupdated in this participant registry, or if the participant does not exist in the\nparticipant registry, then the promise will be rejected with an error that\ndescribes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Update the specified participant in this participant registry."],"parameters":[{"description":"The participant to update in this participant registry.","type":"Resource","name":"participant","optional":false}],"suboptions":[],"return":{"description":["A promise. The promise is resolved when the participant have been updated in this participant registry. If the participant cannot be updated in this participant registry, or if the participant does not exist in the participant registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"removeAll","parameterTypes":[],"parameterNames":["participants"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function removeAll(participants) {\n            return registry.removeAll(participants);\n        }","example":"// The existing drivers that have come from elsewhere.\nvar driver1;\n// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Remove the drivers from the driver participant registry. Note that\n    // one driver is specified as a driver instance, and the other\n    // driver is specified by the ID of the driver.\n    return participantRegistry.removeAll([driver1, 'VEHICLE_2']);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Remove all of the specified participants from this participant registry.","tags":[{"title":"example","description":"// The existing drivers that have come from elsewhere.\nvar driver1;\n// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Remove the drivers from the driver participant registry. Note that\n    // one driver is specified as a driver instance, and the other\n    // driver is specified by the ID of the driver.\n    return participantRegistry.removeAll([driver1, 'VEHICLE_2']);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.ParticipantRegistry#removeAll"},{"title":"param","description":"The participants, or the IDs of the participants,\nto remove from this participant registry.","type":{"type":"UnionType","elements":[{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"string"}]},{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Resource"}]}]},"name":"participants"},{"title":"return","description":"A promise. The promise is resolved when all of the\nparticipants have been removed from this participant registry. If the participants cannot be\nremoved from this participant registry, or if the participants do not exist in the\nparticipant registry, then the promise will be rejected with an error that\ndescribes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Remove all of the specified participants from this participant registry."],"parameters":[{"description":"The participants, or the IDs of the participants, to remove from this participant registry.","name":"participants","type":"; ","optional":false}],"suboptions":[],"return":{"description":["A promise. The promise is resolved when all of the participants have been removed from this participant registry. If the participants cannot be removed from this participant registry, or if the participants do not exist in the participant registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"}},{"visibility":"+","returnType":"Promise","name":"remove","parameterTypes":[],"parameterNames":["participant"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function remove(participant) {\n            return registry.remove(participant);\n        }","example":"// The existing driver that has come from elsewhere.\nvar driver;\n// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Remove the driver from the driver participant registry.\n    return participantRegistry.remove(driver);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Remove the specified participant from this participant registry.","tags":[{"title":"example","description":"// The existing driver that has come from elsewhere.\nvar driver;\n// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Remove the driver from the driver participant registry.\n    return participantRegistry.remove(driver);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.ParticipantRegistry#remove"},{"title":"param","description":"The participant, or ID of the participant, to remove\nfrom this participant registry.","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"string"},{"type":"NameExpression","name":"Resource"}]},"name":"participant"},{"title":"return","description":"A promise. The promise is resolved when the participant\nhas been removed from this participant registry. If the participant cannot be\nremoved from this participant registry, or if the participant does not exist in the\nparticipant registry, then the promise will be rejected with an error that\ndescribes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Remove the specified participant from this participant registry."],"parameters":[{"description":"The participant, or ID of the participant, to remove from this participant registry.","name":"participant","type":"string; Resource","optional":false}],"suboptions":[],"return":{"description":["A promise. The promise is resolved when the participant has been removed from this participant registry. If the participant cannot be removed from this participant registry, or if the participant does not exist in the participant registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"}}],"description":["Do not attempt to create an instance of this class.<br> You must use the {@link module:composer-runtime#getParticipantRegistry getParticipantRegistry} method instead."],"seeAlso":[],"visibility":"public","module":"runtime"},{"name":"Query","commentData":{"description":"Do not attempt to create an instance of this class.<br>\nYou must use the {@link module:composer-runtime#buildQuery buildQuery}\nmethod instead.","tags":[{"title":"class","description":null,"type":null,"name":"Query"},{"title":"classdesc","description":"A query represents a built query."},{"title":"memberof","description":"module:composer-runtime"},{"title":"public","description":null}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["link","class","classdesc","memberof","public"],"throws":"","example":"","commentData":{"description":"Do not attempt to create an instance of this class.<br>\nYou must use the {@link module:composer-runtime#buildQuery buildQuery}\nmethod instead.","tags":[{"title":"class","description":null,"type":null,"name":"Query"},{"title":"classdesc","description":"A query represents a built query."},{"title":"memberof","description":"module:composer-runtime"},{"title":"public","description":null}]},"description":["Do not attempt to create an instance of this class.<br> You must use the {@link module:composer-runtime#buildQuery buildQuery} method instead."],"parameters":[],"suboptions":[]}],"description":["Do not attempt to create an instance of this class.<br> You must use the {@link module:composer-runtime#buildQuery buildQuery} method instead."],"seeAlso":[],"visibility":"public","module":"runtime"},{"name":"Serializer","commentData":{"description":"Do not attempt to create an instance of this class.<br>\nYou must use the {@link module:composer-runtime#getSerializer getSerializer}\nmethod instead.","tags":[{"title":"class","description":null,"type":null,"name":"Serializer"},{"title":"classdesc","description":"A serializer serializes instances of assets, participants, transactions,\nand relationships to and from a JSON serialization format."},{"title":"memberof","description":"module:composer-runtime"},{"title":"public","description":null}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":["link","class","classdesc","memberof","public"],"throws":"","example":"","commentData":{"description":"Do not attempt to create an instance of this class.<br>\nYou must use the {@link module:composer-runtime#getSerializer getSerializer}\nmethod instead.","tags":[{"title":"class","description":null,"type":null,"name":"Serializer"},{"title":"classdesc","description":"A serializer serializes instances of assets, participants, transactions,\nand relationships to and from a JSON serialization format."},{"title":"memberof","description":"module:composer-runtime"},{"title":"public","description":null}]},"description":["Do not attempt to create an instance of this class.<br> You must use the {@link module:composer-runtime#getSerializer getSerializer} method instead."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"Object","name":"toJSON","parameterTypes":["Resource","Object","boolean","boolean","boolean"],"parameterNames":["resource","options"],"throws":"Error","decorators":["link","example","public","method","param","param","param","param","param","return","throws","link"],"functionText":"function toJSON(resource, options) {\n            return serializer.toJSON(resource, options);\n        }","example":"// Get the serializer.\nvar serializer = getSerializer();\n// Serialize a vehicle.\nvar json = serializer.toJSON(vehicle);","commentData":{"description":"Convert a {@link Resource} to a JavaScript object suitable for long-term\nperistent storage.","tags":[{"title":"example","description":"// Get the serializer.\nvar serializer = getSerializer();\n// Serialize a vehicle.\nvar json = serializer.toJSON(vehicle);"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.Serializer#toJSON"},{"title":"param","description":"The resource instance to convert to JSON.","type":{"type":"NameExpression","name":"Resource"},"name":"resource"},{"title":"param","description":"The optional serialization options.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Object"}},"name":"options"},{"title":"param","description":"Validate the structure of the resource\nwith its model prior to serialization, true by default.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"boolean"}},"name":"options.validate"},{"title":"param","description":"Convert resources that\nare specified for relationship fields into relationships, false by default.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"boolean"}},"name":"options.convertResourcesToRelationships"},{"title":"param","description":"Permit resources in the\nplace of relationships (serializing them as resources), false by default.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"boolean"}},"name":"options.permitResourcesForRelationships"},{"title":"return","description":"The JavaScript object that represents the resource","type":{"type":"NameExpression","name":"Object"}},{"title":"throws","description":"If the specified resource is not an instance of\n{@link Resource} or if it fails validation during serialization.","type":{"type":"NameExpression","name":"Error"}}]},"description":["Convert a {@link Resource} to a JavaScript object suitable for long-term peristent storage."],"parameters":[{"description":"The resource instance to convert to JSON.","type":"Resource","name":"resource","optional":false},{"description":"The optional serialization options.","type":"Object","name":"options","optional":true}],"suboptions":[{"description":"Validate the structure of the resource with its model prior to serialization, true by default.","type":"boolean","name":"options.validate","optional":true},{"description":"Convert resources that are specified for relationship fields into relationships, false by default.","type":"boolean","name":"options.convertResourcesToRelationships","optional":true},{"description":"Permit resources in the place of relationships (serializing them as resources), false by default.","type":"boolean","name":"options.permitResourcesForRelationships","optional":true}],"return":{"description":["The JavaScript object that represents the resource"],"type":"Object"}},{"visibility":"+","returnType":"Resource","name":"fromJSON","parameterTypes":["Object","Object","boolean"],"parameterNames":["json","options"],"throws":"Error","decorators":["link","link","link","example","public","method","param","param","param","return","throws","link"],"functionText":"function fromJSON(json, options) {\n            return serializer.fromJSON(json, options);\n        }","example":"// Get the serializer.\nvar serializer = getSerializer();\n// Serialize a vehicle.\nvar vehicle = serializer.fromJSON(json);","commentData":{"description":"Create a {@link Resource} from a JavaScript object representation.\nThe JavaScript object should have been created by calling the\n{@link Serializer#toJSON toJSON} API.\nThe {@link Resource} is populated based on the JavaScript object.","tags":[{"title":"example","description":"// Get the serializer.\nvar serializer = getSerializer();\n// Serialize a vehicle.\nvar vehicle = serializer.fromJSON(json);"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.Serializer#fromJSON"},{"title":"param","description":"The JavaScript object for the resource.","type":{"type":"NameExpression","name":"Object"},"name":"json"},{"title":"param","description":"The optional serialization options.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Object"}},"name":"options"},{"title":"param","description":"Handle JSON objects\nin the place of strings for relationships, false by default.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"boolean"}},"name":"options.acceptResourcesForRelationships"},{"title":"return","description":"The resource.","type":{"type":"NameExpression","name":"Resource"}},{"title":"throws","description":"If the specified resource is not an instance of\n{@link Resource} or if it fails validation during serialization.","type":{"type":"NameExpression","name":"Error"}}]},"description":["Create a {@link Resource} from a JavaScript object representation. The JavaScript object should have been created by calling the {@link Serializer#toJSON toJSON} API. The {@link Resource} is populated based on the JavaScript object."],"parameters":[{"description":"The JavaScript object for the resource.","type":"Object","name":"json","optional":false},{"description":"The optional serialization options.","type":"Object","name":"options","optional":true}],"suboptions":[{"description":"Handle JSON objects in the place of strings for relationships, false by default.","type":"boolean","name":"options.acceptResourcesForRelationships","optional":true}],"return":{"description":["The resource."],"type":"Resource"}}],"description":["Do not attempt to create an instance of this class.<br> You must use the {@link module:composer-runtime#getSerializer getSerializer} method instead."],"seeAlso":[],"visibility":"public","module":"runtime"}],"undefined":[{"name":"ConsoleLogger","commentData":{"description":"A functional logger implementation that simply writes to the console.","tags":[]},"methods":[{"visibility":"+","returnType":"void","name":"format","methodArgs":[],"decorators":[],"throws":"","example":"","commentData":{"description":"A functional logger implementation that simply writes to the console.","tags":[]},"description":["A functional logger implementation that simply writes to the console."],"parameters":[],"suboptions":[]},{"visibility":"+","returnType":"void","name":"log","methodArgs":[],"decorators":[],"throws":"","example":"","commentData":{"description":"A functional logger implementation that simply writes to the console.","tags":[]},"description":["A functional logger implementation that simply writes to the console."],"parameters":[],"suboptions":[]}],"description":["A functional logger implementation that simply writes to the console."],"seeAlso":[],"visibility":"public"}]}